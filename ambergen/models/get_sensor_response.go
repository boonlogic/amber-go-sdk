// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSensorResponse get sensor response
//
// swagger:model getSensorResponse
type GetSensorResponse struct {

	// Additional label to be assigned for sensor
	// Required: true
	Label *string `json:"label"`

	// Unique identifier for sensor
	// Required: true
	SensorID *string `json:"sensorId"`

	// Sensor usage info
	// Required: true
	UsageInfo *SensorUsageInfo `json:"usageInfo"`
}

// Validate validates this get sensor response
func (m *GetSensorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSensorResponse) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *GetSensorResponse) validateSensorID(formats strfmt.Registry) error {

	if err := validate.Required("sensorId", "body", m.SensorID); err != nil {
		return err
	}

	return nil
}

func (m *GetSensorResponse) validateUsageInfo(formats strfmt.Registry) error {

	if err := validate.Required("usageInfo", "body", m.UsageInfo); err != nil {
		return err
	}

	if m.UsageInfo != nil {
		if err := m.UsageInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usageInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usageInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get sensor response based on the context it is used
func (m *GetSensorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUsageInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSensorResponse) contextValidateUsageInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.UsageInfo != nil {
		if err := m.UsageInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usageInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usageInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSensorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSensorResponse) UnmarshalBinary(b []byte) error {
	var res GetSensorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
