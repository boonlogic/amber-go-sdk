// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MNanoBackend m nano backend
//
// swagger:model m_NanoBackend
type MNanoBackend struct {

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// m init complete
	MInitComplete bool `json:"m_InitComplete,omitempty"`

	// m learning is on
	MLearningIsOn bool `json:"m_LearningIsOn,omitempty"`

	// m num of patterns clustered
	MNumOfPatternsClustered uint64 `json:"m_NumOfPatternsClustered,omitempty"`

	// m pattern length
	MPatternLength uint16 `json:"m_PatternLength,omitempty"`

	// m pattern memory
	MPatternMemory *MPatternMemory `json:"m_PatternMemory,omitempty"`
}

// Validate validates this m nano backend
func (m *MNanoBackend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMPatternMemory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MNanoBackend) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MNanoBackend) validateMPatternMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.MPatternMemory) { // not required
		return nil
	}

	if m.MPatternMemory != nil {
		if err := m.MPatternMemory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_PatternMemory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_PatternMemory")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this m nano backend based on the context it is used
func (m *MNanoBackend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMPatternMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MNanoBackend) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MNanoBackend) contextValidateMPatternMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.MPatternMemory != nil {
		if err := m.MPatternMemory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_PatternMemory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_PatternMemory")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MNanoBackend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MNanoBackend) UnmarshalBinary(b []byte) error {
	var res MNanoBackend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
