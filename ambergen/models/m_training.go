// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MTraining m training
//
// swagger:model m_Training
type MTraining struct {

	// version number
	VersionNumber []VersionNumber `json:"VersionNumber"`

	// m anomaly indexes
	MAnomalyIndexes []uint32 `json:"m_AnomalyIndexes"`

	// m cluster growth
	// Required: true
	MClusterGrowth []uint64 `json:"m_ClusterGrowth"`

	// m geometric plot x
	// Required: true
	MGeometricPlotX []uint32 `json:"m_GeometricPlotX"`

	// m geometric plot y
	// Required: true
	MGeometricPlotY []float32 `json:"m_GeometricPlotY"`
}

// Validate validates this m training
func (m *MTraining) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMClusterGrowth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMGeometricPlotX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMGeometricPlotY(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTraining) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	for i := 0; i < len(m.VersionNumber); i++ {

		if err := m.VersionNumber[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VersionNumber" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VersionNumber" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *MTraining) validateMClusterGrowth(formats strfmt.Registry) error {

	if err := validate.Required("m_ClusterGrowth", "body", m.MClusterGrowth); err != nil {
		return err
	}

	return nil
}

func (m *MTraining) validateMGeometricPlotX(formats strfmt.Registry) error {

	if err := validate.Required("m_GeometricPlotX", "body", m.MGeometricPlotX); err != nil {
		return err
	}

	return nil
}

func (m *MTraining) validateMGeometricPlotY(formats strfmt.Registry) error {

	if err := validate.Required("m_GeometricPlotY", "body", m.MGeometricPlotY); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m training based on the context it is used
func (m *MTraining) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MTraining) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VersionNumber); i++ {

		if err := m.VersionNumber[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VersionNumber" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VersionNumber" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MTraining) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MTraining) UnmarshalBinary(b []byte) error {
	var res MTraining
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
