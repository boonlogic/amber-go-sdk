// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MAP m a p
//
// swagger:model m_AP
type MAP struct {

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// m autotune by features
	// Required: true
	MAutotuneByFeatures *bool `json:"m_AutotuneByFeatures"`

	// m autotune p v
	// Required: true
	MAutotunePV *bool `json:"m_AutotunePV"`

	// m autotune range
	// Required: true
	MAutotuneRange *bool `json:"m_AutotuneRange"`

	// m features to tune array
	MFeaturesToTuneArray []uint16 `json:"m_FeaturesToTuneArray"`

	// m max clusters
	MMaxClusters uint16 `json:"m_MaxClusters,omitempty"`
}

// Validate validates this m a p
func (m *MAP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAutotuneByFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAutotunePV(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAutotuneRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MAP) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MAP) validateMAutotuneByFeatures(formats strfmt.Registry) error {

	if err := validate.Required("m_AutotuneByFeatures", "body", m.MAutotuneByFeatures); err != nil {
		return err
	}

	return nil
}

func (m *MAP) validateMAutotunePV(formats strfmt.Registry) error {

	if err := validate.Required("m_AutotunePV", "body", m.MAutotunePV); err != nil {
		return err
	}

	return nil
}

func (m *MAP) validateMAutotuneRange(formats strfmt.Registry) error {

	if err := validate.Required("m_AutotuneRange", "body", m.MAutotuneRange); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m a p based on the context it is used
func (m *MAP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MAP) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MAP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MAP) UnmarshalBinary(b []byte) error {
	var res MAP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
