// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostConfigRequest post config request
//
// swagger:model postConfigRequest
type PostConfigRequest struct {

	// the number of samples to use when calculating AH
	AnomalyHistoryWindow *uint32 `json:"anomalyHistoryWindow,omitempty"`

	// number of features per sample
	// Required: true
	// Minimum: 1
	FeatureCount *uint16 `json:"featureCount"`

	// features
	Features []*PostFeatureConfig `json:"features"`

	// learning graduation requirement for stopping learning upon reaching this cluster count
	LearningMaxClusters *uint16 `json:"learningMaxClusters,omitempty"`

	// learning graduation requirement for stopping learning after acquiring this many samples
	LearningMaxSamples *uint64 `json:"learningMaxSamples,omitempty"`

	// enables graduation requirements for learning
	LearningRateDenominator *uint64 `json:"learningRateDenominator,omitempty"`

	// enables graduation requirements for learning
	LearningRateNumerator *uint64 `json:"learningRateNumerator,omitempty"`

	// the number of samples to be applied before autotuning begins
	SamplesToBuffer *uint32 `json:"samplesToBuffer,omitempty"`

	// streaming window size
	// Required: true
	// Maximum: 500
	StreamingWindowSize *uint16 `json:"streamingWindowSize"`
}

// Validate validates this post config request
func (m *PostConfigRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatureCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamingWindowSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConfigRequest) validateFeatureCount(formats strfmt.Registry) error {

	if err := validate.Required("featureCount", "body", m.FeatureCount); err != nil {
		return err
	}

	if err := validate.MinimumUint("featureCount", "body", uint64(*m.FeatureCount), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *PostConfigRequest) validateFeatures(formats strfmt.Registry) error {
	if swag.IsZero(m.Features) { // not required
		return nil
	}

	for i := 0; i < len(m.Features); i++ {
		if swag.IsZero(m.Features[i]) { // not required
			continue
		}

		if m.Features[i] != nil {
			if err := m.Features[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostConfigRequest) validateStreamingWindowSize(formats strfmt.Registry) error {

	if err := validate.Required("streamingWindowSize", "body", m.StreamingWindowSize); err != nil {
		return err
	}

	if err := validate.MaximumUint("streamingWindowSize", "body", uint64(*m.StreamingWindowSize), 500, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post config request based on the context it is used
func (m *PostConfigRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostConfigRequest) contextValidateFeatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Features); i++ {

		if m.Features[i] != nil {
			if err := m.Features[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostConfigRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostConfigRequest) UnmarshalBinary(b []byte) error {
	var res PostConfigRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
