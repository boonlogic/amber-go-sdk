// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MAmberStatus m amber status
//
// swagger:model m_AmberStatus
type MAmberStatus struct {

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// m current cluster count
	// Required: true
	MCurrentClusterCount *uint32 `json:"m_CurrentClusterCount"`

	// m message
	MMessage string `json:"m_Message,omitempty"`

	// m progress
	MProgress uint16 `json:"m_Progress,omitempty"`

	// m retry count
	// Required: true
	MRetryCount *uint16 `json:"m_RetryCount"`

	// m status
	// Required: true
	MStatus *string `json:"m_Status"`

	// m streaming window size
	// Required: true
	MStreamingWindowSize *uint16 `json:"m_StreamingWindowSize"`

	// m total inferences
	// Required: true
	MTotalInferences *uint64 `json:"m_TotalInferences"`

	// m total samples written
	MTotalSamplesWritten uint64 `json:"m_TotalSamplesWritten,omitempty"`
}

// Validate validates this m amber status
func (m *MAmberStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMCurrentClusterCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRetryCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMStreamingWindowSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMTotalInferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MAmberStatus) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MAmberStatus) validateMCurrentClusterCount(formats strfmt.Registry) error {

	if err := validate.Required("m_CurrentClusterCount", "body", m.MCurrentClusterCount); err != nil {
		return err
	}

	return nil
}

func (m *MAmberStatus) validateMRetryCount(formats strfmt.Registry) error {

	if err := validate.Required("m_RetryCount", "body", m.MRetryCount); err != nil {
		return err
	}

	return nil
}

func (m *MAmberStatus) validateMStatus(formats strfmt.Registry) error {

	if err := validate.Required("m_Status", "body", m.MStatus); err != nil {
		return err
	}

	return nil
}

func (m *MAmberStatus) validateMStreamingWindowSize(formats strfmt.Registry) error {

	if err := validate.Required("m_StreamingWindowSize", "body", m.MStreamingWindowSize); err != nil {
		return err
	}

	return nil
}

func (m *MAmberStatus) validateMTotalInferences(formats strfmt.Registry) error {

	if err := validate.Required("m_TotalInferences", "body", m.MTotalInferences); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m amber status based on the context it is used
func (m *MAmberStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MAmberStatus) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MAmberStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MAmberStatus) UnmarshalBinary(b []byte) error {
	var res MAmberStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
