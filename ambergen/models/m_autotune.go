// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MAutotune m autotune
//
// swagger:model m_Autotune
type MAutotune struct {

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// m a p
	// Required: true
	MAP *MAP `json:"m_AP"`

	// m autotuning in progress
	MAutotuningInProgress bool `json:"m_AutotuningInProgress,omitempty"`

	// m autotuning succeeded
	MAutotuningSucceeded bool `json:"m_AutotuningSucceeded,omitempty"`

	// m error string buffer
	MErrorStringBuffer string `json:"m_ErrorStringBuffer,omitempty"`

	// m features to tune array
	MFeaturesToTuneArray []bool `json:"m_FeaturesToTuneArray"`

	// m n c p
	MNCP *MNCP `json:"m_NCP,omitempty"`

	// m num patterns to autotune
	MNumPatternsToAutotune uint64 `json:"m_NumPatternsToAutotune,omitempty"`

	// m percent complete
	MPercentComplete float64 `json:"m_PercentComplete,omitempty"`
}

// Validate validates this m autotune
func (m *MAutotune) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMNCP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MAutotune) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MAutotune) validateMAP(formats strfmt.Registry) error {

	if err := validate.Required("m_AP", "body", m.MAP); err != nil {
		return err
	}

	if m.MAP != nil {
		if err := m.MAP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_AP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_AP")
			}
			return err
		}
	}

	return nil
}

func (m *MAutotune) validateMNCP(formats strfmt.Registry) error {
	if swag.IsZero(m.MNCP) { // not required
		return nil
	}

	if m.MNCP != nil {
		if err := m.MNCP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_NCP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_NCP")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this m autotune based on the context it is used
func (m *MAutotune) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMAP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMNCP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MAutotune) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MAutotune) contextValidateMAP(ctx context.Context, formats strfmt.Registry) error {

	if m.MAP != nil {
		if err := m.MAP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_AP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_AP")
			}
			return err
		}
	}

	return nil
}

func (m *MAutotune) contextValidateMNCP(ctx context.Context, formats strfmt.Registry) error {

	if m.MNCP != nil {
		if err := m.MNCP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_NCP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_NCP")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MAutotune) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MAutotune) UnmarshalBinary(b []byte) error {
	var res MAutotune
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
