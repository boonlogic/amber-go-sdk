// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SensorUsageInfo sensor usage info
//
// swagger:model sensorUsageInfo
type SensorUsageInfo struct {

	// getAmberSummary endpoint usage info
	// Required: true
	GetAmberSummary *EndpointUsageInfo `json:"getAmberSummary"`

	// getConfig endpoint usage info
	// Required: true
	GetConfig *EndpointUsageInfo `json:"getConfig"`

	// getPretrain endpoint usage info
	// Required: true
	GetPretrain *EndpointUsageInfo `json:"getPretrain"`

	// getRootCause endpoint usage info
	// Required: true
	GetRootCause *EndpointUsageInfo `json:"getRootCause"`

	// getSensor endpoint usage info
	// Required: true
	GetSensor *EndpointUsageInfo `json:"getSensor"`

	// getStatus endpoint usage info
	// Required: true
	GetStatus *EndpointUsageInfo `json:"getStatus"`

	// postConfig endpoint usage info
	// Required: true
	PostConfig *EndpointUsageInfo `json:"postConfig"`

	// postPretrain endpoint usage info
	// Required: true
	PostPretrain *EndpointUsageInfo `json:"postPretrain"`

	// postStream endpoint usage info
	// Required: true
	PostStream *StreamingEndpointUsageInfo `json:"postStream"`

	// putSensor endpoint usage info
	// Required: true
	PutSensor *EndpointUsageInfo `json:"putSensor"`
}

// Validate validates this sensor usage info
func (m *SensorUsageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGetAmberSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetPretrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetRootCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetSensor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGetStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostPretrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostStream(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePutSensor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorUsageInfo) validateGetAmberSummary(formats strfmt.Registry) error {

	if err := validate.Required("getAmberSummary", "body", m.GetAmberSummary); err != nil {
		return err
	}

	if m.GetAmberSummary != nil {
		if err := m.GetAmberSummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAmberSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAmberSummary")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validateGetConfig(formats strfmt.Registry) error {

	if err := validate.Required("getConfig", "body", m.GetConfig); err != nil {
		return err
	}

	if m.GetConfig != nil {
		if err := m.GetConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validateGetPretrain(formats strfmt.Registry) error {

	if err := validate.Required("getPretrain", "body", m.GetPretrain); err != nil {
		return err
	}

	if m.GetPretrain != nil {
		if err := m.GetPretrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPretrain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPretrain")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validateGetRootCause(formats strfmt.Registry) error {

	if err := validate.Required("getRootCause", "body", m.GetRootCause); err != nil {
		return err
	}

	if m.GetRootCause != nil {
		if err := m.GetRootCause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getRootCause")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getRootCause")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validateGetSensor(formats strfmt.Registry) error {

	if err := validate.Required("getSensor", "body", m.GetSensor); err != nil {
		return err
	}

	if m.GetSensor != nil {
		if err := m.GetSensor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSensor")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validateGetStatus(formats strfmt.Registry) error {

	if err := validate.Required("getStatus", "body", m.GetStatus); err != nil {
		return err
	}

	if m.GetStatus != nil {
		if err := m.GetStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getStatus")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validatePostConfig(formats strfmt.Registry) error {

	if err := validate.Required("postConfig", "body", m.PostConfig); err != nil {
		return err
	}

	if m.PostConfig != nil {
		if err := m.PostConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validatePostPretrain(formats strfmt.Registry) error {

	if err := validate.Required("postPretrain", "body", m.PostPretrain); err != nil {
		return err
	}

	if m.PostPretrain != nil {
		if err := m.PostPretrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPretrain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPretrain")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validatePostStream(formats strfmt.Registry) error {

	if err := validate.Required("postStream", "body", m.PostStream); err != nil {
		return err
	}

	if m.PostStream != nil {
		if err := m.PostStream.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postStream")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postStream")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) validatePutSensor(formats strfmt.Registry) error {

	if err := validate.Required("putSensor", "body", m.PutSensor); err != nil {
		return err
	}

	if m.PutSensor != nil {
		if err := m.PutSensor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putSensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putSensor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sensor usage info based on the context it is used
func (m *SensorUsageInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGetAmberSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGetConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGetPretrain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGetRootCause(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGetSensor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGetStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostPretrain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostStream(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePutSensor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorUsageInfo) contextValidateGetAmberSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.GetAmberSummary != nil {
		if err := m.GetAmberSummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAmberSummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAmberSummary")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidateGetConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.GetConfig != nil {
		if err := m.GetConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidateGetPretrain(ctx context.Context, formats strfmt.Registry) error {

	if m.GetPretrain != nil {
		if err := m.GetPretrain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPretrain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getPretrain")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidateGetRootCause(ctx context.Context, formats strfmt.Registry) error {

	if m.GetRootCause != nil {
		if err := m.GetRootCause.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getRootCause")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getRootCause")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidateGetSensor(ctx context.Context, formats strfmt.Registry) error {

	if m.GetSensor != nil {
		if err := m.GetSensor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSensor")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidateGetStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.GetStatus != nil {
		if err := m.GetStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getStatus")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidatePostConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.PostConfig != nil {
		if err := m.PostConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidatePostPretrain(ctx context.Context, formats strfmt.Registry) error {

	if m.PostPretrain != nil {
		if err := m.PostPretrain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postPretrain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postPretrain")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidatePostStream(ctx context.Context, formats strfmt.Registry) error {

	if m.PostStream != nil {
		if err := m.PostStream.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postStream")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postStream")
			}
			return err
		}
	}

	return nil
}

func (m *SensorUsageInfo) contextValidatePutSensor(ctx context.Context, formats strfmt.Registry) error {

	if m.PutSensor != nil {
		if err := m.PutSensor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putSensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putSensor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SensorUsageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SensorUsageInfo) UnmarshalBinary(b []byte) error {
	var res SensorUsageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
