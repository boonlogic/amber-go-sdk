// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/boonlogic/amber-go-sdk/models"
)

// PutStreamReader is a Reader for the PutStream structure.
type PutStreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutStreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutStreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPutStreamAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutStreamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutStreamUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutStreamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutStreamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutStreamServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutStreamOK creates a PutStreamOK with default headers values
func NewPutStreamOK() *PutStreamOK {
	return &PutStreamOK{}
}

/*
	PutStreamOK describes a response with status code 200, with default header values.

Vector has been updated and analytics were run.
*/
type PutStreamOK struct {
	Payload *models.PutStreamResponse
}

func (o *PutStreamOK) Error() string {
	return fmt.Sprintf("[PUT /stream][%d] putStreamOK  %+v", 200, o.Payload)
}
func (o *PutStreamOK) GetPayload() *models.PutStreamResponse {
	return o.Payload
}

func (o *PutStreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutStreamResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutStreamAccepted creates a PutStreamAccepted with default headers values
func NewPutStreamAccepted() *PutStreamAccepted {
	return &PutStreamAccepted{}
}

/*
	PutStreamAccepted describes a response with status code 202, with default header values.

Vector has been updated but no analytics were run.
*/
type PutStreamAccepted struct {
	Payload *models.PutStreamResponse
}

func (o *PutStreamAccepted) Error() string {
	return fmt.Sprintf("[PUT /stream][%d] putStreamAccepted  %+v", 202, o.Payload)
}
func (o *PutStreamAccepted) GetPayload() *models.PutStreamResponse {
	return o.Payload
}

func (o *PutStreamAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutStreamResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutStreamBadRequest creates a PutStreamBadRequest with default headers values
func NewPutStreamBadRequest() *PutStreamBadRequest {
	return &PutStreamBadRequest{}
}

/*
	PutStreamBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutStreamBadRequest struct {
	Payload *models.Error
}

func (o *PutStreamBadRequest) Error() string {
	return fmt.Sprintf("[PUT /stream][%d] putStreamBadRequest  %+v", 400, o.Payload)
}
func (o *PutStreamBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutStreamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutStreamUnauthorized creates a PutStreamUnauthorized with default headers values
func NewPutStreamUnauthorized() *PutStreamUnauthorized {
	return &PutStreamUnauthorized{}
}

/*
	PutStreamUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutStreamUnauthorized struct {
	Payload *models.Error
}

func (o *PutStreamUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /stream][%d] putStreamUnauthorized  %+v", 401, o.Payload)
}
func (o *PutStreamUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutStreamUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutStreamNotFound creates a PutStreamNotFound with default headers values
func NewPutStreamNotFound() *PutStreamNotFound {
	return &PutStreamNotFound{}
}

/*
	PutStreamNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type PutStreamNotFound struct {
	Payload *models.Error
}

func (o *PutStreamNotFound) Error() string {
	return fmt.Sprintf("[PUT /stream][%d] putStreamNotFound  %+v", 404, o.Payload)
}
func (o *PutStreamNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutStreamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutStreamInternalServerError creates a PutStreamInternalServerError with default headers values
func NewPutStreamInternalServerError() *PutStreamInternalServerError {
	return &PutStreamInternalServerError{}
}

/*
	PutStreamInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PutStreamInternalServerError struct {
	Payload *models.Error
}

func (o *PutStreamInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /stream][%d] putStreamInternalServerError  %+v", 500, o.Payload)
}
func (o *PutStreamInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutStreamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutStreamServiceUnavailable creates a PutStreamServiceUnavailable with default headers values
func NewPutStreamServiceUnavailable() *PutStreamServiceUnavailable {
	return &PutStreamServiceUnavailable{}
}

/*
	PutStreamServiceUnavailable describes a response with status code 503, with default header values.

Server busy
*/
type PutStreamServiceUnavailable struct {
	Payload *models.Error
}

func (o *PutStreamServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /stream][%d] putStreamServiceUnavailable  %+v", 503, o.Payload)
}
func (o *PutStreamServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutStreamServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
