// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPretrainParams creates a new GetPretrainParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPretrainParams() *GetPretrainParams {
	return &GetPretrainParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPretrainParamsWithTimeout creates a new GetPretrainParams object
// with the ability to set a timeout on a request.
func NewGetPretrainParamsWithTimeout(timeout time.Duration) *GetPretrainParams {
	return &GetPretrainParams{
		timeout: timeout,
	}
}

// NewGetPretrainParamsWithContext creates a new GetPretrainParams object
// with the ability to set a context for a request.
func NewGetPretrainParamsWithContext(ctx context.Context) *GetPretrainParams {
	return &GetPretrainParams{
		Context: ctx,
	}
}

// NewGetPretrainParamsWithHTTPClient creates a new GetPretrainParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPretrainParamsWithHTTPClient(client *http.Client) *GetPretrainParams {
	return &GetPretrainParams{
		HTTPClient: client,
	}
}

/* GetPretrainParams contains all the parameters to send to the API endpoint
   for the get pretrain operation.

   Typically these are written to a http.Request.
*/
type GetPretrainParams struct {

	/* SensorID.

	   Unique identifier for sensor
	*/
	SensorID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get pretrain params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPretrainParams) WithDefaults() *GetPretrainParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get pretrain params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPretrainParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get pretrain params
func (o *GetPretrainParams) WithTimeout(timeout time.Duration) *GetPretrainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pretrain params
func (o *GetPretrainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pretrain params
func (o *GetPretrainParams) WithContext(ctx context.Context) *GetPretrainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pretrain params
func (o *GetPretrainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pretrain params
func (o *GetPretrainParams) WithHTTPClient(client *http.Client) *GetPretrainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pretrain params
func (o *GetPretrainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSensorID adds the sensorID to the get pretrain params
func (o *GetPretrainParams) WithSensorID(sensorID string) *GetPretrainParams {
	o.SetSensorID(sensorID)
	return o
}

// SetSensorID adds the sensorId to the get pretrain params
func (o *GetPretrainParams) SetSensorID(sensorID string) {
	o.SensorID = sensorID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPretrainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param sensorId
	if err := r.SetHeaderParam("sensorId", o.SensorID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
