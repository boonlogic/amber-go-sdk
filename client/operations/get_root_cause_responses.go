// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/boonlogic/amber-go-sdk/models"
)

// GetRootCauseReader is a Reader for the GetRootCause structure.
type GetRootCauseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRootCauseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRootCauseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRootCauseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRootCauseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRootCauseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRootCauseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRootCauseOK creates a GetRootCauseOK with default headers values
func NewGetRootCauseOK() *GetRootCauseOK {
	return &GetRootCauseOK{}
}

/* GetRootCauseOK describes a response with status code 200, with default header values.

Operation was successful
*/
type GetRootCauseOK struct {
	Payload models.GetRootCauseResponse
}

func (o *GetRootCauseOK) Error() string {
	return fmt.Sprintf("[GET /rootCause][%d] getRootCauseOK  %+v", 200, o.Payload)
}
func (o *GetRootCauseOK) GetPayload() models.GetRootCauseResponse {
	return o.Payload
}

func (o *GetRootCauseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRootCauseBadRequest creates a GetRootCauseBadRequest with default headers values
func NewGetRootCauseBadRequest() *GetRootCauseBadRequest {
	return &GetRootCauseBadRequest{}
}

/* GetRootCauseBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetRootCauseBadRequest struct {
	Payload *models.Error
}

func (o *GetRootCauseBadRequest) Error() string {
	return fmt.Sprintf("[GET /rootCause][%d] getRootCauseBadRequest  %+v", 400, o.Payload)
}
func (o *GetRootCauseBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRootCauseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRootCauseUnauthorized creates a GetRootCauseUnauthorized with default headers values
func NewGetRootCauseUnauthorized() *GetRootCauseUnauthorized {
	return &GetRootCauseUnauthorized{}
}

/* GetRootCauseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRootCauseUnauthorized struct {
	Payload *models.Error
}

func (o *GetRootCauseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /rootCause][%d] getRootCauseUnauthorized  %+v", 401, o.Payload)
}
func (o *GetRootCauseUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRootCauseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRootCauseNotFound creates a GetRootCauseNotFound with default headers values
func NewGetRootCauseNotFound() *GetRootCauseNotFound {
	return &GetRootCauseNotFound{}
}

/* GetRootCauseNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type GetRootCauseNotFound struct {
	Payload *models.Error
}

func (o *GetRootCauseNotFound) Error() string {
	return fmt.Sprintf("[GET /rootCause][%d] getRootCauseNotFound  %+v", 404, o.Payload)
}
func (o *GetRootCauseNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRootCauseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRootCauseInternalServerError creates a GetRootCauseInternalServerError with default headers values
func NewGetRootCauseInternalServerError() *GetRootCauseInternalServerError {
	return &GetRootCauseInternalServerError{}
}

/* GetRootCauseInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetRootCauseInternalServerError struct {
	Payload *models.Error
}

func (o *GetRootCauseInternalServerError) Error() string {
	return fmt.Sprintf("[GET /rootCause][%d] getRootCauseInternalServerError  %+v", 500, o.Payload)
}
func (o *GetRootCauseInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRootCauseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
