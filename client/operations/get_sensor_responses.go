// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/boonlogic/amber-go-sdk/models"
)

// GetSensorReader is a Reader for the GetSensor structure.
type GetSensorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSensorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSensorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSensorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSensorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSensorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSensorOK creates a GetSensorOK with default headers values
func NewGetSensorOK() *GetSensorOK {
	return &GetSensorOK{}
}

/* GetSensorOK describes a response with status code 200, with default header values.

Operation was successful
*/
type GetSensorOK struct {
	Payload *models.GetSensorResponse
}

func (o *GetSensorOK) Error() string {
	return fmt.Sprintf("[GET /sensor][%d] getSensorOK  %+v", 200, o.Payload)
}
func (o *GetSensorOK) GetPayload() *models.GetSensorResponse {
	return o.Payload
}

func (o *GetSensorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetSensorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorBadRequest creates a GetSensorBadRequest with default headers values
func NewGetSensorBadRequest() *GetSensorBadRequest {
	return &GetSensorBadRequest{}
}

/* GetSensorBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetSensorBadRequest struct {
	Payload *models.Error
}

func (o *GetSensorBadRequest) Error() string {
	return fmt.Sprintf("[GET /sensor][%d] getSensorBadRequest  %+v", 400, o.Payload)
}
func (o *GetSensorBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSensorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUnauthorized creates a GetSensorUnauthorized with default headers values
func NewGetSensorUnauthorized() *GetSensorUnauthorized {
	return &GetSensorUnauthorized{}
}

/* GetSensorUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetSensorUnauthorized struct {
	Payload *models.Error
}

func (o *GetSensorUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sensor][%d] getSensorUnauthorized  %+v", 401, o.Payload)
}
func (o *GetSensorUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSensorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorNotFound creates a GetSensorNotFound with default headers values
func NewGetSensorNotFound() *GetSensorNotFound {
	return &GetSensorNotFound{}
}

/* GetSensorNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type GetSensorNotFound struct {
	Payload *models.Error
}

func (o *GetSensorNotFound) Error() string {
	return fmt.Sprintf("[GET /sensor][%d] getSensorNotFound  %+v", 404, o.Payload)
}
func (o *GetSensorNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSensorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorInternalServerError creates a GetSensorInternalServerError with default headers values
func NewGetSensorInternalServerError() *GetSensorInternalServerError {
	return &GetSensorInternalServerError{}
}

/* GetSensorInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetSensorInternalServerError struct {
	Payload *models.Error
}

func (o *GetSensorInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sensor][%d] getSensorInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSensorInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSensorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
