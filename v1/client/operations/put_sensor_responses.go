// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/boonlogic/amber-go-sdk/v1/models"
)

// PutSensorReader is a Reader for the PutSensor structure.
type PutSensorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSensorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSensorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSensorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutSensorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSensorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutSensorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSensorOK creates a PutSensorOK with default headers values
func NewPutSensorOK() *PutSensorOK {
	return &PutSensorOK{}
}

/*
	PutSensorOK describes a response with status code 200, with default header values.

Operation was successful
*/
type PutSensorOK struct {
	Payload *models.PutSensorResponse
}

func (o *PutSensorOK) Error() string {
	return fmt.Sprintf("[PUT /sensor][%d] putSensorOK  %+v", 200, o.Payload)
}
func (o *PutSensorOK) GetPayload() *models.PutSensorResponse {
	return o.Payload
}

func (o *PutSensorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutSensorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSensorBadRequest creates a PutSensorBadRequest with default headers values
func NewPutSensorBadRequest() *PutSensorBadRequest {
	return &PutSensorBadRequest{}
}

/*
	PutSensorBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutSensorBadRequest struct {
	Payload *models.Error
}

func (o *PutSensorBadRequest) Error() string {
	return fmt.Sprintf("[PUT /sensor][%d] putSensorBadRequest  %+v", 400, o.Payload)
}
func (o *PutSensorBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSensorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSensorUnauthorized creates a PutSensorUnauthorized with default headers values
func NewPutSensorUnauthorized() *PutSensorUnauthorized {
	return &PutSensorUnauthorized{}
}

/*
	PutSensorUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PutSensorUnauthorized struct {
	Payload *models.Error
}

func (o *PutSensorUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /sensor][%d] putSensorUnauthorized  %+v", 401, o.Payload)
}
func (o *PutSensorUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSensorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSensorNotFound creates a PutSensorNotFound with default headers values
func NewPutSensorNotFound() *PutSensorNotFound {
	return &PutSensorNotFound{}
}

/*
	PutSensorNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type PutSensorNotFound struct {
	Payload *models.Error
}

func (o *PutSensorNotFound) Error() string {
	return fmt.Sprintf("[PUT /sensor][%d] putSensorNotFound  %+v", 404, o.Payload)
}
func (o *PutSensorNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSensorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSensorInternalServerError creates a PutSensorInternalServerError with default headers values
func NewPutSensorInternalServerError() *PutSensorInternalServerError {
	return &PutSensorInternalServerError{}
}

/*
	PutSensorInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PutSensorInternalServerError struct {
	Payload *models.Error
}

func (o *PutSensorInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /sensor][%d] putSensorInternalServerError  %+v", 500, o.Payload)
}
func (o *PutSensorInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PutSensorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
