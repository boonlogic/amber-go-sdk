// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/boonlogic/amber-go-sdk/v1/models"
)

// NewPutStreamParams creates a new PutStreamParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutStreamParams() *PutStreamParams {
	return &PutStreamParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutStreamParamsWithTimeout creates a new PutStreamParams object
// with the ability to set a timeout on a request.
func NewPutStreamParamsWithTimeout(timeout time.Duration) *PutStreamParams {
	return &PutStreamParams{
		timeout: timeout,
	}
}

// NewPutStreamParamsWithContext creates a new PutStreamParams object
// with the ability to set a context for a request.
func NewPutStreamParamsWithContext(ctx context.Context) *PutStreamParams {
	return &PutStreamParams{
		Context: ctx,
	}
}

// NewPutStreamParamsWithHTTPClient creates a new PutStreamParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutStreamParamsWithHTTPClient(client *http.Client) *PutStreamParams {
	return &PutStreamParams{
		HTTPClient: client,
	}
}

/*
PutStreamParams contains all the parameters to send to the API endpoint

	for the put stream operation.

	Typically these are written to a http.Request.
*/
type PutStreamParams struct {

	/* PutStreamRequest.

	   New values for sensor fusion vector.
	*/
	PutStreamRequest *models.PutStreamRequest

	/* SensorID.

	   Unique identifier for sensor
	*/
	SensorID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put stream params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutStreamParams) WithDefaults() *PutStreamParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put stream params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutStreamParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the put stream params
func (o *PutStreamParams) WithTimeout(timeout time.Duration) *PutStreamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put stream params
func (o *PutStreamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put stream params
func (o *PutStreamParams) WithContext(ctx context.Context) *PutStreamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put stream params
func (o *PutStreamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put stream params
func (o *PutStreamParams) WithHTTPClient(client *http.Client) *PutStreamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put stream params
func (o *PutStreamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPutStreamRequest adds the putStreamRequest to the put stream params
func (o *PutStreamParams) WithPutStreamRequest(putStreamRequest *models.PutStreamRequest) *PutStreamParams {
	o.SetPutStreamRequest(putStreamRequest)
	return o
}

// SetPutStreamRequest adds the putStreamRequest to the put stream params
func (o *PutStreamParams) SetPutStreamRequest(putStreamRequest *models.PutStreamRequest) {
	o.PutStreamRequest = putStreamRequest
}

// WithSensorID adds the sensorID to the put stream params
func (o *PutStreamParams) WithSensorID(sensorID string) *PutStreamParams {
	o.SetSensorID(sensorID)
	return o
}

// SetSensorID adds the sensorId to the put stream params
func (o *PutStreamParams) SetSensorID(sensorID string) {
	o.SensorID = sensorID
}

// WriteToRequest writes these params to a swagger request
func (o *PutStreamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.PutStreamRequest != nil {
		if err := r.SetBodyParam(o.PutStreamRequest); err != nil {
			return err
		}
	}

	// header param sensorId
	if err := r.SetHeaderParam("sensorId", o.SensorID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
