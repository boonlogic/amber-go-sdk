// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/boonlogic/amber-go-sdk/v1/models"
)

// DeleteSensorReader is a Reader for the DeleteSensor structure.
type DeleteSensorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSensorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSensorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSensorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSensorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSensorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSensorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSensorOK creates a DeleteSensorOK with default headers values
func NewDeleteSensorOK() *DeleteSensorOK {
	return &DeleteSensorOK{}
}

/*
	DeleteSensorOK describes a response with status code 200, with default header values.

Operation was successful
*/
type DeleteSensorOK struct {
	Payload *models.Error
}

func (o *DeleteSensorOK) Error() string {
	return fmt.Sprintf("[DELETE /sensor][%d] deleteSensorOK  %+v", 200, o.Payload)
}
func (o *DeleteSensorOK) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSensorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorBadRequest creates a DeleteSensorBadRequest with default headers values
func NewDeleteSensorBadRequest() *DeleteSensorBadRequest {
	return &DeleteSensorBadRequest{}
}

/*
	DeleteSensorBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteSensorBadRequest struct {
	Payload *models.Error
}

func (o *DeleteSensorBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /sensor][%d] deleteSensorBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteSensorBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSensorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorUnauthorized creates a DeleteSensorUnauthorized with default headers values
func NewDeleteSensorUnauthorized() *DeleteSensorUnauthorized {
	return &DeleteSensorUnauthorized{}
}

/*
	DeleteSensorUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteSensorUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteSensorUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /sensor][%d] deleteSensorUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteSensorUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSensorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorNotFound creates a DeleteSensorNotFound with default headers values
func NewDeleteSensorNotFound() *DeleteSensorNotFound {
	return &DeleteSensorNotFound{}
}

/*
	DeleteSensorNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type DeleteSensorNotFound struct {
	Payload *models.Error
}

func (o *DeleteSensorNotFound) Error() string {
	return fmt.Sprintf("[DELETE /sensor][%d] deleteSensorNotFound  %+v", 404, o.Payload)
}
func (o *DeleteSensorNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSensorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSensorInternalServerError creates a DeleteSensorInternalServerError with default headers values
func NewDeleteSensorInternalServerError() *DeleteSensorInternalServerError {
	return &DeleteSensorInternalServerError{}
}

/*
	DeleteSensorInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type DeleteSensorInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteSensorInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /sensor][%d] deleteSensorInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteSensorInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSensorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
