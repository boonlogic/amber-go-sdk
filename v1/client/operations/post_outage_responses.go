// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/boonlogic/amber-go-sdk/v1/models"
)

// PostOutageReader is a Reader for the PostOutage structure.
type PostOutageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOutageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostOutageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostOutageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostOutageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostOutageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOutageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostOutageOK creates a PostOutageOK with default headers values
func NewPostOutageOK() *PostOutageOK {
	return &PostOutageOK{}
}

/*
	PostOutageOK describes a response with status code 200, with default header values.

Operation was successful
*/
type PostOutageOK struct {
	Payload *models.PostOutageResponse
}

func (o *PostOutageOK) Error() string {
	return fmt.Sprintf("[POST /outage][%d] postOutageOK  %+v", 200, o.Payload)
}
func (o *PostOutageOK) GetPayload() *models.PostOutageResponse {
	return o.Payload
}

func (o *PostOutageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostOutageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutageBadRequest creates a PostOutageBadRequest with default headers values
func NewPostOutageBadRequest() *PostOutageBadRequest {
	return &PostOutageBadRequest{}
}

/*
	PostOutageBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostOutageBadRequest struct {
	Payload *models.Error
}

func (o *PostOutageBadRequest) Error() string {
	return fmt.Sprintf("[POST /outage][%d] postOutageBadRequest  %+v", 400, o.Payload)
}
func (o *PostOutageBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostOutageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutageUnauthorized creates a PostOutageUnauthorized with default headers values
func NewPostOutageUnauthorized() *PostOutageUnauthorized {
	return &PostOutageUnauthorized{}
}

/*
	PostOutageUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostOutageUnauthorized struct {
	Payload *models.Error
}

func (o *PostOutageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /outage][%d] postOutageUnauthorized  %+v", 401, o.Payload)
}
func (o *PostOutageUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostOutageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutageNotFound creates a PostOutageNotFound with default headers values
func NewPostOutageNotFound() *PostOutageNotFound {
	return &PostOutageNotFound{}
}

/*
	PostOutageNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type PostOutageNotFound struct {
	Payload *models.Error
}

func (o *PostOutageNotFound) Error() string {
	return fmt.Sprintf("[POST /outage][%d] postOutageNotFound  %+v", 404, o.Payload)
}
func (o *PostOutageNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostOutageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOutageInternalServerError creates a PostOutageInternalServerError with default headers values
func NewPostOutageInternalServerError() *PostOutageInternalServerError {
	return &PostOutageInternalServerError{}
}

/*
	PostOutageInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PostOutageInternalServerError struct {
	Payload *models.Error
}

func (o *PostOutageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /outage][%d] postOutageInternalServerError  %+v", 500, o.Payload)
}
func (o *PostOutageInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostOutageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
