// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetConfigResponse get config response
//
// swagger:model getConfigResponse
type GetConfigResponse struct {
	StreamingParameters

	// number of features per sample
	// Required: true
	FeatureCount *uint16 `json:"featureCount"`

	// features
	// Required: true
	Features []*FeatureConfig `json:"features"`

	// the percent variation (for instance, 0.025 gives 2.5% variation) used for clustering
	// Required: true
	PercentVariation *float32 `json:"percentVariation"`

	// override autotuned percent variation with this value
	PercentVariationOverride float32 `json:"percentVariationOverride,omitempty"`

	// the number of samples to be applied before autotuning begins
	// Required: true
	SamplesToBuffer *uint32 `json:"samplesToBuffer"`

	// streaming window size
	// Required: true
	// Maximum: 500
	StreamingWindowSize *uint16 `json:"streamingWindowSize"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GetConfigResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StreamingParameters
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StreamingParameters = aO0

	// AO1
	var dataAO1 struct {
		FeatureCount *uint16 `json:"featureCount"`

		Features []*FeatureConfig `json:"features"`

		PercentVariation *float32 `json:"percentVariation"`

		PercentVariationOverride float32 `json:"percentVariationOverride,omitempty"`

		SamplesToBuffer *uint32 `json:"samplesToBuffer"`

		StreamingWindowSize *uint16 `json:"streamingWindowSize"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.FeatureCount = dataAO1.FeatureCount

	m.Features = dataAO1.Features

	m.PercentVariation = dataAO1.PercentVariation

	m.PercentVariationOverride = dataAO1.PercentVariationOverride

	m.SamplesToBuffer = dataAO1.SamplesToBuffer

	m.StreamingWindowSize = dataAO1.StreamingWindowSize

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GetConfigResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StreamingParameters)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		FeatureCount *uint16 `json:"featureCount"`

		Features []*FeatureConfig `json:"features"`

		PercentVariation *float32 `json:"percentVariation"`

		PercentVariationOverride float32 `json:"percentVariationOverride,omitempty"`

		SamplesToBuffer *uint32 `json:"samplesToBuffer"`

		StreamingWindowSize *uint16 `json:"streamingWindowSize"`
	}

	dataAO1.FeatureCount = m.FeatureCount

	dataAO1.Features = m.Features

	dataAO1.PercentVariation = m.PercentVariation

	dataAO1.PercentVariationOverride = m.PercentVariationOverride

	dataAO1.SamplesToBuffer = m.SamplesToBuffer

	dataAO1.StreamingWindowSize = m.StreamingWindowSize

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get config response
func (m *GetConfigResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StreamingParameters
	if err := m.StreamingParameters.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentVariation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamplesToBuffer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamingWindowSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetConfigResponse) validateFeatureCount(formats strfmt.Registry) error {

	if err := validate.Required("featureCount", "body", m.FeatureCount); err != nil {
		return err
	}

	return nil
}

func (m *GetConfigResponse) validateFeatures(formats strfmt.Registry) error {

	if err := validate.Required("features", "body", m.Features); err != nil {
		return err
	}

	for i := 0; i < len(m.Features); i++ {
		if swag.IsZero(m.Features[i]) { // not required
			continue
		}

		if m.Features[i] != nil {
			if err := m.Features[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetConfigResponse) validatePercentVariation(formats strfmt.Registry) error {

	if err := validate.Required("percentVariation", "body", m.PercentVariation); err != nil {
		return err
	}

	return nil
}

func (m *GetConfigResponse) validateSamplesToBuffer(formats strfmt.Registry) error {

	if err := validate.Required("samplesToBuffer", "body", m.SamplesToBuffer); err != nil {
		return err
	}

	return nil
}

func (m *GetConfigResponse) validateStreamingWindowSize(formats strfmt.Registry) error {

	if err := validate.Required("streamingWindowSize", "body", m.StreamingWindowSize); err != nil {
		return err
	}

	if err := validate.MaximumUint("streamingWindowSize", "body", uint64(*m.StreamingWindowSize), 500, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get config response based on the context it is used
func (m *GetConfigResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StreamingParameters
	if err := m.StreamingParameters.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetConfigResponse) contextValidateFeatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Features); i++ {

		if m.Features[i] != nil {
			if err := m.Features[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetConfigResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetConfigResponse) UnmarshalBinary(b []byte) error {
	var res GetConfigResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
