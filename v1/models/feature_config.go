// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeatureConfig feature config
//
// swagger:model featureConfig
type FeatureConfig struct {

	// label associated with feature
	Label string `json:"label,omitempty"`

	// corresponding maximum value
	MaxVal float32 `json:"maxVal"`

	// the value that should be considered the minimum value for this feature. This can be set to a value larger than the actual min if you want to treat all value less than that as the same (for instance, to keep a noise spike from having undue influence in the clustering
	MinVal float32 `json:"minVal"`

	// policy for submitting sensor fusion vector when this feature is updated. One of "submit", "nosubmit" (defaults to "submit")
	// Enum: [submit nosubmit]
	SubmitRule string `json:"submitRule,omitempty"`

	// corresponding weight
	Weight uint16 `json:"weight,omitempty"`
}

// Validate validates this feature config
func (m *FeatureConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubmitRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var featureConfigTypeSubmitRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["submit","nosubmit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		featureConfigTypeSubmitRulePropEnum = append(featureConfigTypeSubmitRulePropEnum, v)
	}
}

const (

	// FeatureConfigSubmitRuleSubmit captures enum value "submit"
	FeatureConfigSubmitRuleSubmit string = "submit"

	// FeatureConfigSubmitRuleNosubmit captures enum value "nosubmit"
	FeatureConfigSubmitRuleNosubmit string = "nosubmit"
)

// prop value enum
func (m *FeatureConfig) validateSubmitRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, featureConfigTypeSubmitRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FeatureConfig) validateSubmitRule(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmitRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubmitRuleEnum("submitRule", "body", m.SubmitRule); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this feature config based on context it is used
func (m *FeatureConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FeatureConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureConfig) UnmarshalBinary(b []byte) error {
	var res FeatureConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
