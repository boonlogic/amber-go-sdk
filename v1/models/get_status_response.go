// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetStatusResponse get status response
//
// swagger:model getStatusResponse
type GetStatusResponse struct {

	// anomaly indexes
	// Required: true
	AnomalyIndexes Uint16Array `json:"anomalyIndexes"`

	// anomaly threshold
	// Required: true
	AnomalyThreshold *uint16 `json:"anomalyThreshold"`

	// cluster growth
	// Required: true
	ClusterGrowth Uint64Array `json:"clusterGrowth"`

	// cluster sizes
	// Required: true
	ClusterSizes Uint64Array `json:"clusterSizes"`

	// distance indexes
	// Required: true
	DistanceIndexes Uint16Array `json:"distanceIndexes"`

	// frequency indexes
	// Required: true
	FrequencyIndexes Uint16Array `json:"frequencyIndexes"`

	// num clusters
	// Required: true
	NumClusters *uint64 `json:"numClusters"`

	// pca
	// Required: true
	Pca PCA `json:"pca"`

	// state of the sensor. Possible state variables are: Error, Buffering, Autotuning, Learning, Monitoring
	// Required: true
	State *string `json:"state"`

	// inferences since the most recent restart
	// Required: true
	TotalInferences *uint64 `json:"totalInferences"`
}

// Validate validates this get status response
func (m *GetStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnomalyIndexes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnomalyThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterGrowth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterSizes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistanceIndexes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequencyIndexes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePca(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalInferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetStatusResponse) validateAnomalyIndexes(formats strfmt.Registry) error {

	if err := validate.Required("anomalyIndexes", "body", m.AnomalyIndexes); err != nil {
		return err
	}

	if err := m.AnomalyIndexes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("anomalyIndexes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("anomalyIndexes")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) validateAnomalyThreshold(formats strfmt.Registry) error {

	if err := validate.Required("anomalyThreshold", "body", m.AnomalyThreshold); err != nil {
		return err
	}

	return nil
}

func (m *GetStatusResponse) validateClusterGrowth(formats strfmt.Registry) error {

	if err := validate.Required("clusterGrowth", "body", m.ClusterGrowth); err != nil {
		return err
	}

	if err := m.ClusterGrowth.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clusterGrowth")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clusterGrowth")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) validateClusterSizes(formats strfmt.Registry) error {

	if err := validate.Required("clusterSizes", "body", m.ClusterSizes); err != nil {
		return err
	}

	if err := m.ClusterSizes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clusterSizes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clusterSizes")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) validateDistanceIndexes(formats strfmt.Registry) error {

	if err := validate.Required("distanceIndexes", "body", m.DistanceIndexes); err != nil {
		return err
	}

	if err := m.DistanceIndexes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("distanceIndexes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("distanceIndexes")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) validateFrequencyIndexes(formats strfmt.Registry) error {

	if err := validate.Required("frequencyIndexes", "body", m.FrequencyIndexes); err != nil {
		return err
	}

	if err := m.FrequencyIndexes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("frequencyIndexes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("frequencyIndexes")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) validateNumClusters(formats strfmt.Registry) error {

	if err := validate.Required("numClusters", "body", m.NumClusters); err != nil {
		return err
	}

	return nil
}

func (m *GetStatusResponse) validatePca(formats strfmt.Registry) error {

	if err := validate.Required("pca", "body", m.Pca); err != nil {
		return err
	}

	if err := m.Pca.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pca")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("pca")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *GetStatusResponse) validateTotalInferences(formats strfmt.Registry) error {

	if err := validate.Required("totalInferences", "body", m.TotalInferences); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get status response based on the context it is used
func (m *GetStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnomalyIndexes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterGrowth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterSizes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDistanceIndexes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrequencyIndexes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePca(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetStatusResponse) contextValidateAnomalyIndexes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AnomalyIndexes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("anomalyIndexes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("anomalyIndexes")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) contextValidateClusterGrowth(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ClusterGrowth.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clusterGrowth")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clusterGrowth")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) contextValidateClusterSizes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ClusterSizes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clusterSizes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clusterSizes")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) contextValidateDistanceIndexes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DistanceIndexes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("distanceIndexes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("distanceIndexes")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) contextValidateFrequencyIndexes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FrequencyIndexes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("frequencyIndexes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("frequencyIndexes")
		}
		return err
	}

	return nil
}

func (m *GetStatusResponse) contextValidatePca(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Pca.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pca")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("pca")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetStatusResponse) UnmarshalBinary(b []byte) error {
	var res GetStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
