// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MBufferStats m buffer stats
//
// swagger:model m_BufferStats
type MBufferStats struct {

	// load buffer capacity
	LoadBufferCapacity uint64 `json:"LoadBufferCapacity,omitempty"`

	// load buffer length
	LoadBufferLength uint64 `json:"LoadBufferLength,omitempty"`

	// total bytes processed
	TotalBytesProcessed uint64 `json:"TotalBytesProcessed,omitempty"`

	// total bytes written
	TotalBytesWritten uint64 `json:"TotalBytesWritten,omitempty"`

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`
}

// Validate validates this m buffer stats
func (m *MBufferStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MBufferStats) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

// ContextValidate validate this m buffer stats based on the context it is used
func (m *MBufferStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MBufferStats) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MBufferStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MBufferStats) UnmarshalBinary(b []byte) error {
	var res MBufferStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
