// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSummaryResponse get summary response
//
// swagger:model getSummaryResponse
type GetSummaryResponse struct {

	// magic number
	MagicNumber MagicNumber `json:"MagicNumber,omitempty"`

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// m amber alert critical value
	// Required: true
	MAmberAlertCriticalValue *uint64 `json:"m_AmberAlertCriticalValue"`

	// m amber status
	// Required: true
	MAmberStatus *MAmberStatus `json:"m_AmberStatus"`

	// m amber warning critical value
	// Required: true
	MAmberWarningCriticalValue *uint64 `json:"m_AmberWarningCriticalValue"`

	// m anomaly metric by anomaly count
	MAnomalyMetricByAnomalyCount []float32 `json:"m_AnomalyMetricByAnomalyCount"`

	// m anomaly threshold
	// Required: true
	MAnomalyThreshold *uint16 `json:"m_AnomalyThreshold"`

	// m autotune
	// Required: true
	MAutotune *MAutotune `json:"m_Autotune"`

	// m autotuning elbow cluster counts
	// Required: true
	MAutotuningElbowClusterCounts []uint16 `json:"m_AutotuningElbowClusterCounts"`

	// m autotuning elbow p v array
	// Required: true
	MAutotuningElbowPVArray []float32 `json:"m_AutotuningElbowPVArray"`

	// m buffer stats
	MBufferStats *MBufferStats `json:"m_BufferStats,omitempty"`

	// m clustering parameters initialized
	MClusteringParametersInitialized bool `json:"m_ClusteringParametersInitialized,omitempty"`

	// m error string buffer
	MErrorStringBuffer string `json:"m_ErrorStringBuffer,omitempty"`

	// m modified at
	MModifiedAt uint64 `json:"m_ModifiedAt,omitempty"`

	// m nano
	// Required: true
	MNano *MNano `json:"m_Nano"`

	// m recent a ds
	// Required: true
	MRecentADs *MRecentAnalytics `json:"m_RecentADs"`

	// m recent a hs
	// Required: true
	MRecentAHs *MRecentAnalytics `json:"m_RecentAHs"`

	// m recent a ms
	MRecentAMs *MRecentAMs `json:"m_RecentAMs,omitempty"`

	// m recent a ws
	// Required: true
	MRecentAWs *MRecentAnalytics `json:"m_RecentAWs"`

	// m recent anomaly count
	MRecentAnomalyCount uint16 `json:"m_RecentAnomalyCount,omitempty"`

	// m recent h ss
	// Required: true
	MRecentHSs *MRecentHSs `json:"m_RecentHSs"`

	// m recent i ds
	MRecentIDs *MRecentIDs `json:"m_RecentIDs,omitempty"`

	// m recent n is
	// Required: true
	MRecentNIs *MRecentAnalytics `json:"m_RecentNIs"`

	// m recent n ss
	// Required: true
	MRecentNSs *MRecentAnalytics `json:"m_RecentNSs"`

	// m recent o ms
	// Required: true
	MRecentOMs *MRecentOMs `json:"m_RecentOMs"`

	// m recent p is
	// Required: true
	MRecentPIs *MRecentAnalytics `json:"m_RecentPIs"`

	// m recent r is
	// Required: true
	MRecentRIs *MRecentAnalytics `json:"m_RecentRIs"`

	// m recent raw samples
	// Required: true
	MRecentRawSamples *MRecentSamples `json:"m_RecentRawSamples"`

	// m recent s is
	// Required: true
	MRecentSIs *MRecentAnalytics `json:"m_RecentSIs"`

	// m recent samples
	// Required: true
	MRecentSamples *MRecentSamples `json:"m_RecentSamples"`

	// m recent times
	// Required: true
	MRecentTimes *MRecentTimes `json:"m_RecentTimes"`

	// m results ID array
	MResultsIDArray []uint32 `json:"m_ResultsIDArray"`

	// m streaming mode
	MStreamingMode bool `json:"m_StreamingMode,omitempty"`

	// m streaming mode status
	MStreamingModeStatus uint16 `json:"m_StreamingModeStatus,omitempty"`

	// m streaming parameters
	// Required: true
	MStreamingParameters *MStreamingParameters `json:"m_StreamingParameters"`

	// m training
	// Required: true
	MTraining *MTraining `json:"m_Training"`

	// m training samples
	MTrainingSamples *MRecentSamples `json:"m_TrainingSamples,omitempty"`
}

// Validate validates this get summary response
func (m *GetSummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMagicNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAmberAlertCriticalValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAmberStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAmberWarningCriticalValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAnomalyThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAutotune(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAutotuningElbowClusterCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMAutotuningElbowPVArray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMBufferStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMNano(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentADs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentAHs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentAMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentAWs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentHSs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentIDs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentNIs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentNSs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentOMs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentPIs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentRIs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentRawSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentSIs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMRecentTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMStreamingParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMTraining(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMTrainingSamples(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSummaryResponse) validateMagicNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.MagicNumber) { // not required
		return nil
	}

	if err := m.MagicNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MagicNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MagicNumber")
		}
		return err
	}

	return nil
}

func (m *GetSummaryResponse) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *GetSummaryResponse) validateMAmberAlertCriticalValue(formats strfmt.Registry) error {

	if err := validate.Required("m_AmberAlertCriticalValue", "body", m.MAmberAlertCriticalValue); err != nil {
		return err
	}

	return nil
}

func (m *GetSummaryResponse) validateMAmberStatus(formats strfmt.Registry) error {

	if err := validate.Required("m_AmberStatus", "body", m.MAmberStatus); err != nil {
		return err
	}

	if m.MAmberStatus != nil {
		if err := m.MAmberStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_AmberStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_AmberStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMAmberWarningCriticalValue(formats strfmt.Registry) error {

	if err := validate.Required("m_AmberWarningCriticalValue", "body", m.MAmberWarningCriticalValue); err != nil {
		return err
	}

	return nil
}

func (m *GetSummaryResponse) validateMAnomalyThreshold(formats strfmt.Registry) error {

	if err := validate.Required("m_AnomalyThreshold", "body", m.MAnomalyThreshold); err != nil {
		return err
	}

	return nil
}

func (m *GetSummaryResponse) validateMAutotune(formats strfmt.Registry) error {

	if err := validate.Required("m_Autotune", "body", m.MAutotune); err != nil {
		return err
	}

	if m.MAutotune != nil {
		if err := m.MAutotune.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_Autotune")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_Autotune")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMAutotuningElbowClusterCounts(formats strfmt.Registry) error {

	if err := validate.Required("m_AutotuningElbowClusterCounts", "body", m.MAutotuningElbowClusterCounts); err != nil {
		return err
	}

	return nil
}

func (m *GetSummaryResponse) validateMAutotuningElbowPVArray(formats strfmt.Registry) error {

	if err := validate.Required("m_AutotuningElbowPVArray", "body", m.MAutotuningElbowPVArray); err != nil {
		return err
	}

	return nil
}

func (m *GetSummaryResponse) validateMBufferStats(formats strfmt.Registry) error {
	if swag.IsZero(m.MBufferStats) { // not required
		return nil
	}

	if m.MBufferStats != nil {
		if err := m.MBufferStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_BufferStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_BufferStats")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMNano(formats strfmt.Registry) error {

	if err := validate.Required("m_Nano", "body", m.MNano); err != nil {
		return err
	}

	if m.MNano != nil {
		if err := m.MNano.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_Nano")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_Nano")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentADs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentADs", "body", m.MRecentADs); err != nil {
		return err
	}

	if m.MRecentADs != nil {
		if err := m.MRecentADs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentADs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentADs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentAHs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentAHs", "body", m.MRecentAHs); err != nil {
		return err
	}

	if m.MRecentAHs != nil {
		if err := m.MRecentAHs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentAHs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentAHs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentAMs(formats strfmt.Registry) error {
	if swag.IsZero(m.MRecentAMs) { // not required
		return nil
	}

	if m.MRecentAMs != nil {
		if err := m.MRecentAMs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentAMs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentAMs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentAWs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentAWs", "body", m.MRecentAWs); err != nil {
		return err
	}

	if m.MRecentAWs != nil {
		if err := m.MRecentAWs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentAWs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentAWs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentHSs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentHSs", "body", m.MRecentHSs); err != nil {
		return err
	}

	if m.MRecentHSs != nil {
		if err := m.MRecentHSs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentHSs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentHSs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentIDs(formats strfmt.Registry) error {
	if swag.IsZero(m.MRecentIDs) { // not required
		return nil
	}

	if m.MRecentIDs != nil {
		if err := m.MRecentIDs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentIDs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentIDs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentNIs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentNIs", "body", m.MRecentNIs); err != nil {
		return err
	}

	if m.MRecentNIs != nil {
		if err := m.MRecentNIs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentNIs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentNIs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentNSs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentNSs", "body", m.MRecentNSs); err != nil {
		return err
	}

	if m.MRecentNSs != nil {
		if err := m.MRecentNSs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentNSs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentNSs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentOMs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentOMs", "body", m.MRecentOMs); err != nil {
		return err
	}

	if m.MRecentOMs != nil {
		if err := m.MRecentOMs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentOMs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentOMs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentPIs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentPIs", "body", m.MRecentPIs); err != nil {
		return err
	}

	if m.MRecentPIs != nil {
		if err := m.MRecentPIs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentPIs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentPIs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentRIs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentRIs", "body", m.MRecentRIs); err != nil {
		return err
	}

	if m.MRecentRIs != nil {
		if err := m.MRecentRIs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentRIs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentRIs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentRawSamples(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentRawSamples", "body", m.MRecentRawSamples); err != nil {
		return err
	}

	if m.MRecentRawSamples != nil {
		if err := m.MRecentRawSamples.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentRawSamples")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentRawSamples")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentSIs(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentSIs", "body", m.MRecentSIs); err != nil {
		return err
	}

	if m.MRecentSIs != nil {
		if err := m.MRecentSIs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentSIs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentSIs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentSamples(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentSamples", "body", m.MRecentSamples); err != nil {
		return err
	}

	if m.MRecentSamples != nil {
		if err := m.MRecentSamples.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentSamples")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentSamples")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMRecentTimes(formats strfmt.Registry) error {

	if err := validate.Required("m_RecentTimes", "body", m.MRecentTimes); err != nil {
		return err
	}

	if m.MRecentTimes != nil {
		if err := m.MRecentTimes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentTimes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentTimes")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMStreamingParameters(formats strfmt.Registry) error {

	if err := validate.Required("m_StreamingParameters", "body", m.MStreamingParameters); err != nil {
		return err
	}

	if m.MStreamingParameters != nil {
		if err := m.MStreamingParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_StreamingParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_StreamingParameters")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMTraining(formats strfmt.Registry) error {

	if err := validate.Required("m_Training", "body", m.MTraining); err != nil {
		return err
	}

	if m.MTraining != nil {
		if err := m.MTraining.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_Training")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_Training")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) validateMTrainingSamples(formats strfmt.Registry) error {
	if swag.IsZero(m.MTrainingSamples) { // not required
		return nil
	}

	if m.MTrainingSamples != nil {
		if err := m.MTrainingSamples.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_TrainingSamples")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_TrainingSamples")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get summary response based on the context it is used
func (m *GetSummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMagicNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMAmberStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMAutotune(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMBufferStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMNano(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentADs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentAHs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentAMs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentAWs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentHSs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentIDs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentNIs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentNSs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentOMs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentPIs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentRIs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentRawSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentSIs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMRecentTimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMStreamingParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMTraining(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMTrainingSamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSummaryResponse) contextValidateMagicNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MagicNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MagicNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MagicNumber")
		}
		return err
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMAmberStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.MAmberStatus != nil {
		if err := m.MAmberStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_AmberStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_AmberStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMAutotune(ctx context.Context, formats strfmt.Registry) error {

	if m.MAutotune != nil {
		if err := m.MAutotune.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_Autotune")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_Autotune")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMBufferStats(ctx context.Context, formats strfmt.Registry) error {

	if m.MBufferStats != nil {
		if err := m.MBufferStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_BufferStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_BufferStats")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMNano(ctx context.Context, formats strfmt.Registry) error {

	if m.MNano != nil {
		if err := m.MNano.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_Nano")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_Nano")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentADs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentADs != nil {
		if err := m.MRecentADs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentADs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentADs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentAHs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentAHs != nil {
		if err := m.MRecentAHs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentAHs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentAHs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentAMs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentAMs != nil {
		if err := m.MRecentAMs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentAMs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentAMs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentAWs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentAWs != nil {
		if err := m.MRecentAWs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentAWs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentAWs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentHSs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentHSs != nil {
		if err := m.MRecentHSs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentHSs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentHSs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentIDs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentIDs != nil {
		if err := m.MRecentIDs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentIDs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentIDs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentNIs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentNIs != nil {
		if err := m.MRecentNIs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentNIs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentNIs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentNSs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentNSs != nil {
		if err := m.MRecentNSs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentNSs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentNSs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentOMs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentOMs != nil {
		if err := m.MRecentOMs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentOMs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentOMs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentPIs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentPIs != nil {
		if err := m.MRecentPIs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentPIs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentPIs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentRIs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentRIs != nil {
		if err := m.MRecentRIs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentRIs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentRIs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentRawSamples(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentRawSamples != nil {
		if err := m.MRecentRawSamples.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentRawSamples")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentRawSamples")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentSIs(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentSIs != nil {
		if err := m.MRecentSIs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentSIs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentSIs")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentSamples(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentSamples != nil {
		if err := m.MRecentSamples.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentSamples")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentSamples")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMRecentTimes(ctx context.Context, formats strfmt.Registry) error {

	if m.MRecentTimes != nil {
		if err := m.MRecentTimes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_RecentTimes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_RecentTimes")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMStreamingParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.MStreamingParameters != nil {
		if err := m.MStreamingParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_StreamingParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_StreamingParameters")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMTraining(ctx context.Context, formats strfmt.Registry) error {

	if m.MTraining != nil {
		if err := m.MTraining.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_Training")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_Training")
			}
			return err
		}
	}

	return nil
}

func (m *GetSummaryResponse) contextValidateMTrainingSamples(ctx context.Context, formats strfmt.Registry) error {

	if m.MTrainingSamples != nil {
		if err := m.MTrainingSamples.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_TrainingSamples")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_TrainingSamples")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSummaryResponse) UnmarshalBinary(b []byte) error {
	var res GetSummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
