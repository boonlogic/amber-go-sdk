// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutStreamRequest put stream request
//
// swagger:model putStreamRequest
type PutStreamRequest struct {

	// Policy for submitting sensor fusion vector on this request, overriding per-feature submit rules in fusion configuration. One of "default", "submit", "nosubmit" (defaults to "default"). Under "default" policy, the per-feature settings of "submit" or "nosubmit" are used to determine whether this update to the fusion vector triggers an inference.
	// Enum: [default submit nosubmit]
	SubmitRule string `json:"submitRule,omitempty"`

	// vector
	// Required: true
	Vector []*PutStreamFeature `json:"vector"`
}

// Validate validates this put stream request
func (m *PutStreamRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubmitRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var putStreamRequestTypeSubmitRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","submit","nosubmit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putStreamRequestTypeSubmitRulePropEnum = append(putStreamRequestTypeSubmitRulePropEnum, v)
	}
}

const (

	// PutStreamRequestSubmitRuleDefault captures enum value "default"
	PutStreamRequestSubmitRuleDefault string = "default"

	// PutStreamRequestSubmitRuleSubmit captures enum value "submit"
	PutStreamRequestSubmitRuleSubmit string = "submit"

	// PutStreamRequestSubmitRuleNosubmit captures enum value "nosubmit"
	PutStreamRequestSubmitRuleNosubmit string = "nosubmit"
)

// prop value enum
func (m *PutStreamRequest) validateSubmitRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putStreamRequestTypeSubmitRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PutStreamRequest) validateSubmitRule(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmitRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubmitRuleEnum("submitRule", "body", m.SubmitRule); err != nil {
		return err
	}

	return nil
}

func (m *PutStreamRequest) validateVector(formats strfmt.Registry) error {

	if err := validate.Required("vector", "body", m.Vector); err != nil {
		return err
	}

	for i := 0; i < len(m.Vector); i++ {
		if swag.IsZero(m.Vector[i]) { // not required
			continue
		}

		if m.Vector[i] != nil {
			if err := m.Vector[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vector" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put stream request based on the context it is used
func (m *PutStreamRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutStreamRequest) contextValidateVector(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vector); i++ {

		if m.Vector[i] != nil {
			if err := m.Vector[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vector" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PutStreamRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutStreamRequest) UnmarshalBinary(b []byte) error {
	var res PutStreamRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
