// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MStreamingParameters m streaming parameters
//
// swagger:model m_StreamingParameters
type MStreamingParameters struct {

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// m enable autotuning
	MEnableAutotuning bool `json:"m_EnableAutotuning,omitempty"`

	// m graduate at max clusters
	// Required: true
	MGraduateAtMaxClusters *uint16 `json:"m_GraduateAtMaxClusters"`

	// m graduate at max samples
	// Required: true
	MGraduateAtMaxSamples *uint64 `json:"m_GraduateAtMaxSamples"`

	// m graduation at rate denominator
	// Required: true
	MGraduationAtRateDenominator *uint64 `json:"m_GraduationAtRateDenominator"`

	// m graduation at rate numerator
	// Required: true
	MGraduationAtRateNumerator *uint64 `json:"m_GraduationAtRateNumerator"`

	// m samples to buffer for autotuning
	// Required: true
	MSamplesToBufferForAutotuning *uint32 `json:"m_SamplesToBufferForAutotuning"`
}

// Validate validates this m streaming parameters
func (m *MStreamingParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMGraduateAtMaxClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMGraduateAtMaxSamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMGraduationAtRateDenominator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMGraduationAtRateNumerator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMSamplesToBufferForAutotuning(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MStreamingParameters) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MStreamingParameters) validateMGraduateAtMaxClusters(formats strfmt.Registry) error {

	if err := validate.Required("m_GraduateAtMaxClusters", "body", m.MGraduateAtMaxClusters); err != nil {
		return err
	}

	return nil
}

func (m *MStreamingParameters) validateMGraduateAtMaxSamples(formats strfmt.Registry) error {

	if err := validate.Required("m_GraduateAtMaxSamples", "body", m.MGraduateAtMaxSamples); err != nil {
		return err
	}

	return nil
}

func (m *MStreamingParameters) validateMGraduationAtRateDenominator(formats strfmt.Registry) error {

	if err := validate.Required("m_GraduationAtRateDenominator", "body", m.MGraduationAtRateDenominator); err != nil {
		return err
	}

	return nil
}

func (m *MStreamingParameters) validateMGraduationAtRateNumerator(formats strfmt.Registry) error {

	if err := validate.Required("m_GraduationAtRateNumerator", "body", m.MGraduationAtRateNumerator); err != nil {
		return err
	}

	return nil
}

func (m *MStreamingParameters) validateMSamplesToBufferForAutotuning(formats strfmt.Registry) error {

	if err := validate.Required("m_SamplesToBufferForAutotuning", "body", m.MSamplesToBufferForAutotuning); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m streaming parameters based on the context it is used
func (m *MStreamingParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MStreamingParameters) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MStreamingParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MStreamingParameters) UnmarshalBinary(b []byte) error {
	var res MStreamingParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
