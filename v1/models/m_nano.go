// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MNano m nano
//
// swagger:model m_Nano
type MNano struct {

	// backend version
	BackendVersion uint16 `json:"BackendVersion,omitempty"`

	// magic number
	MagicNumber MagicNumber `json:"MagicNumber,omitempty"`

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// m error msg
	MErrorMsg string `json:"m_ErrorMsg,omitempty"`

	// m nano backend
	MNanoBackend *MNanoBackend `json:"m_NanoBackend,omitempty"`

	// m nano config
	// Required: true
	MNanoConfig *MNanoConfig `json:"m_NanoConfig"`
}

// Validate validates this m nano
func (m *MNano) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMagicNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMNanoBackend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMNanoConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MNano) validateMagicNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.MagicNumber) { // not required
		return nil
	}

	if err := m.MagicNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MagicNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MagicNumber")
		}
		return err
	}

	return nil
}

func (m *MNano) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MNano) validateMNanoBackend(formats strfmt.Registry) error {
	if swag.IsZero(m.MNanoBackend) { // not required
		return nil
	}

	if m.MNanoBackend != nil {
		if err := m.MNanoBackend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_NanoBackend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_NanoBackend")
			}
			return err
		}
	}

	return nil
}

func (m *MNano) validateMNanoConfig(formats strfmt.Registry) error {

	if err := validate.Required("m_NanoConfig", "body", m.MNanoConfig); err != nil {
		return err
	}

	if m.MNanoConfig != nil {
		if err := m.MNanoConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_NanoConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_NanoConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this m nano based on the context it is used
func (m *MNano) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMagicNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMNanoBackend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMNanoConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MNano) contextValidateMagicNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MagicNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MagicNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MagicNumber")
		}
		return err
	}

	return nil
}

func (m *MNano) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MNano) contextValidateMNanoBackend(ctx context.Context, formats strfmt.Registry) error {

	if m.MNanoBackend != nil {
		if err := m.MNanoBackend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_NanoBackend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_NanoBackend")
			}
			return err
		}
	}

	return nil
}

func (m *MNano) contextValidateMNanoConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MNanoConfig != nil {
		if err := m.MNanoConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("m_NanoConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("m_NanoConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MNano) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MNano) UnmarshalBinary(b []byte) error {
	var res MNano
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
