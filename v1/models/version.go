// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Version version
//
// swagger:model version
type Version struct {

	// amber store
	// Required: true
	AmberStore *string `json:"amber-store"`

	// api version
	// Required: true
	APIVersion *string `json:"api-version"`

	// builder
	// Required: true
	Builder *string `json:"builder"`

	// expert api
	// Required: true
	ExpertAPI *string `json:"expert-api"`

	// expert common
	// Required: true
	ExpertCommon *string `json:"expert-common"`

	// mongolia
	// Required: true
	Mongolia *string `json:"mongolia"`

	// nano secure
	// Required: true
	NanoSecure *string `json:"nano-secure"`

	// release
	// Required: true
	Release *string `json:"release"`

	// swagger ui
	// Required: true
	SwaggerUI *string `json:"swagger-ui"`
}

// Validate validates this version
func (m *Version) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmberStore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuilder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpertAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpertCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongolia(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNanoSecure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwaggerUI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Version) validateAmberStore(formats strfmt.Registry) error {

	if err := validate.Required("amber-store", "body", m.AmberStore); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateAPIVersion(formats strfmt.Registry) error {

	if err := validate.Required("api-version", "body", m.APIVersion); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateBuilder(formats strfmt.Registry) error {

	if err := validate.Required("builder", "body", m.Builder); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateExpertAPI(formats strfmt.Registry) error {

	if err := validate.Required("expert-api", "body", m.ExpertAPI); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateExpertCommon(formats strfmt.Registry) error {

	if err := validate.Required("expert-common", "body", m.ExpertCommon); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateMongolia(formats strfmt.Registry) error {

	if err := validate.Required("mongolia", "body", m.Mongolia); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateNanoSecure(formats strfmt.Registry) error {

	if err := validate.Required("nano-secure", "body", m.NanoSecure); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateRelease(formats strfmt.Registry) error {

	if err := validate.Required("release", "body", m.Release); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateSwaggerUI(formats strfmt.Registry) error {

	if err := validate.Required("swagger-ui", "body", m.SwaggerUI); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this version based on context it is used
func (m *Version) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Version) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Version) UnmarshalBinary(b []byte) error {
	var res Version
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
