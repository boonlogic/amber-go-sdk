// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteModel(params *DeleteModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteModelOK, error)

	GetModel(params *GetModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelOK, error)

	GetModelConfig(params *GetModelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelConfigOK, error)

	GetModelDataSetRun(params *GetModelDataSetRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelDataSetRunOK, *GetModelDataSetRunAccepted, error)

	GetModelDiagnostic(params *GetModelDiagnosticParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*GetModelDiagnosticOK, error)

	GetModelNanoStatus(params *GetModelNanoStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelNanoStatusOK, error)

	GetModelPretrain(params *GetModelPretrainParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelPretrainOK, *GetModelPretrainAccepted, error)

	GetModelRootCause(params *GetModelRootCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelRootCauseOK, error)

	GetModelStatus(params *GetModelStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelStatusOK, error)

	GetModelSummary(params *GetModelSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelSummaryOK, error)

	GetModels(params *GetModelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelsOK, error)

	GetVersion(params *GetVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionOK, error)

	PostModel(params *PostModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelOK, error)

	PostModelConfig(params *PostModelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelConfigOK, error)

	PostModelCopy(params *PostModelCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelCopyOK, error)

	PostModelData(params *PostModelDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelDataOK, error)

	PostModelDataSetRun(params *PostModelDataSetRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelDataSetRunOK, *PostModelDataSetRunAccepted, error)

	PostModelLearning(params *PostModelLearningParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelLearningOK, error)

	PostModelMigrate(params *PostModelMigrateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelMigrateOK, error)

	PostModelOutage(params *PostModelOutageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelOutageOK, error)

	PostModelPretrain(params *PostModelPretrainParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelPretrainOK, *PostModelPretrainAccepted, error)

	PostOauth2Access(params *PostOauth2AccessParams, opts ...ClientOption) (*PostOauth2AccessOK, error)

	PostOauth2Refresh(params *PostOauth2RefreshParams, opts ...ClientOption) (*PostOauth2RefreshOK, error)

	PutModel(params *PutModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutModelOK, error)

	PutModelData(params *PutModelDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutModelDataOK, *PutModelDataAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteModel deletes a model

Permanently delete the specified model.
*/
func (a *Client) DeleteModel(params *DeleteModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteModel",
		Method:             "DELETE",
		PathPattern:        "/models/{modelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModel gets model metadata

Return metadata for the specified model.
*/
func (a *Client) GetModel(params *GetModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModel",
		Method:             "GET",
		PathPattern:        "/models/{modelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModelConfig gets model configuration

Get the configuration of the specified model.
*/
func (a *Client) GetModelConfig(params *GetModelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelConfig",
		Method:             "GET",
		PathPattern:        "/models/{modelId}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModelConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModelConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModelDataSetRun gets status on any running datasets
*/
func (a *Client) GetModelDataSetRun(params *GetModelDataSetRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelDataSetRunOK, *GetModelDataSetRunAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelDataSetRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelDataSetRun",
		Method:             "GET",
		PathPattern:        "/models/{modelId}/dataset/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelDataSetRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetModelDataSetRunOK:
		return value, nil, nil
	case *GetModelDataSetRunAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModelDiagnostic gets the diagnostic of a model

Get the current diagnostic of the specified model.
*/
func (a *Client) GetModelDiagnostic(params *GetModelDiagnosticParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*GetModelDiagnosticOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelDiagnosticParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelDiagnostic",
		Method:             "GET",
		PathPattern:        "/models/{modelId}/diagnostic",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelDiagnosticReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModelDiagnosticOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModelDiagnostic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModelNanoStatus gets current nano status of the model

Get the current nano state of the specified model.
*/
func (a *Client) GetModelNanoStatus(params *GetModelNanoStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelNanoStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelNanoStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelNanoStatus",
		Method:             "GET",
		PathPattern:        "/models/{modelId}/status/nano",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelNanoStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModelNanoStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModelNanoStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModelPretrain gets pretraining progress

Get the pretraining status of the specified model.
*/
func (a *Client) GetModelPretrain(params *GetModelPretrainParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelPretrainOK, *GetModelPretrainAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelPretrainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelPretrain",
		Method:             "GET",
		PathPattern:        "/models/{modelId}/pretrain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelPretrainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetModelPretrainOK:
		return value, nil, nil
	case *GetModelPretrainAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModelRootCause performs root cause analysis

Return a measure of the significance of each feature in the creation of a cluster. The values range from 0 to 1 where a relatively high value represents a feature that was influential in creating the new cluster. No conclusions can be drawn from values close to zero. This measure can be computed for existing clusters or for individual vectors directly.
*/
func (a *Client) GetModelRootCause(params *GetModelRootCauseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelRootCauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelRootCauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelRootCause",
		Method:             "GET",
		PathPattern:        "/models/{modelId}/rootCause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelRootCauseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModelRootCauseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModelRootCause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModelStatus gets current status of the model

Get the current state and learning progress of the specified model.
*/
func (a *Client) GetModelStatus(params *GetModelStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelStatus",
		Method:             "GET",
		PathPattern:        "/models/{modelId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModelStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModelStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModelSummary gets the summation of a model

Get the current summation of the specified model.
*/
func (a *Client) GetModelSummary(params *GetModelSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelSummary",
		Method:             "GET",
		PathPattern:        "/models/{modelId}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModelSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModelSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetModels lists all models

Return `id` and `label` for all models belonging to the user.
*/
func (a *Client) GetModels(params *GetModelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModels",
		Method:             "GET",
		PathPattern:        "/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getModels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVersion gets version information

Return version information for the API.
*/
func (a *Client) GetVersion(params *GetVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVersion",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModel creates a model

Create a new model and return its unique identifier.
*/
func (a *Client) PostModel(params *PostModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModel",
		Method:             "POST",
		PathPattern:        "/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModelConfig configures a model

Configure the specified model. Wipes all progress and puts the model in the `Buffering` state.
*/
func (a *Client) PostModelConfig(params *PostModelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModelConfig",
		Method:             "POST",
		PathPattern:        "/models/{modelId}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostModelConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postModelConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModelCopy makes a copy of a model
*/
func (a *Client) PostModelCopy(params *PostModelCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModelCopy",
		Method:             "POST",
		PathPattern:        "/models/{modelId}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostModelCopyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postModelCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModelData sends data to model and get back results

Send data to the specified model, and get back the resulting analytics and model status.
*/
func (a *Client) PostModelData(params *PostModelDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModelData",
		Method:             "POST",
		PathPattern:        "/models/{modelId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostModelDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postModelData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModelDataSetRun runs the nano on a previously uploaded dataset
*/
func (a *Client) PostModelDataSetRun(params *PostModelDataSetRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelDataSetRunOK, *PostModelDataSetRunAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelDataSetRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModelDataSetRun",
		Method:             "POST",
		PathPattern:        "/models/{modelId}/dataset/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelDataSetRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostModelDataSetRunOK:
		return value, nil, nil
	case *PostModelDataSetRunAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModelLearning updates model configuration and re enable learning

Turns on learning and processes new data into the model
*/
func (a *Client) PostModelLearning(params *PostModelLearningParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelLearningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelLearningParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModelLearning",
		Method:             "POST",
		PathPattern:        "/models/{modelId}/learning",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelLearningReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostModelLearningOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postModelLearning: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModelMigrate migrates a v1 sensor to a v2 model

migrate a v1 sensor to a v2 model
*/
func (a *Client) PostModelMigrate(params *PostModelMigrateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelMigrateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelMigrateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModelMigrate",
		Method:             "POST",
		PathPattern:        "/models/{v1ModelId}/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelMigrateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostModelMigrateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postModelMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModelOutage calls this after a data outage before resuming streaming

Resets the streaming window generated by `streamingWindow`. This endpoint should be called after a data outage before resuming streaming.
*/
func (a *Client) PostModelOutage(params *PostModelOutageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelOutageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelOutageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModelOutage",
		Method:             "POST",
		PathPattern:        "/models/{modelId}/outage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelOutageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostModelOutageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postModelOutage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostModelPretrain pretrains model with an existing dataset
*/
func (a *Client) PostModelPretrain(params *PostModelPretrainParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostModelPretrainOK, *PostModelPretrainAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostModelPretrainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postModelPretrain",
		Method:             "POST",
		PathPattern:        "/models/{modelId}/pretrain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostModelPretrainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostModelPretrainOK:
		return value, nil, nil
	case *PostModelPretrainAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOauth2Access requests an API token given license and secret key

Request an Oauth2 Bearer token.
*/
func (a *Client) PostOauth2Access(params *PostOauth2AccessParams, opts ...ClientOption) (*PostOauth2AccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOauth2AccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postOauth2Access",
		Method:             "POST",
		PathPattern:        "/oauth2/access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostOauth2AccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOauth2AccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postOauth2Access: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOauth2Refresh requests an API token given a refresh token

Request an Oauth2 Bearer token.
*/
func (a *Client) PostOauth2Refresh(params *PostOauth2RefreshParams, opts ...ClientOption) (*PostOauth2RefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOauth2RefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postOauth2Refresh",
		Method:             "POST",
		PathPattern:        "/oauth2/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostOauth2RefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOauth2RefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postOauth2Refresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutModel updates model metadata

Update metadata for the specified model.
*/
func (a *Client) PutModel(params *PutModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putModel",
		Method:             "PUT",
		PathPattern:        "/models/{modelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutModelData updates fusion vector and get back results
*/
func (a *Client) PutModelData(params *PutModelDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutModelDataOK, *PutModelDataAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutModelDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putModelData",
		Method:             "PUT",
		PathPattern:        "/models/{modelId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutModelDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutModelDataOK:
		return value, nil, nil
	case *PutModelDataAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
