// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/boonlogic/amber-go-sdk/v2/models"
)

// PostModelDataSetRunReader is a Reader for the PostModelDataSetRun structure.
type PostModelDataSetRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostModelDataSetRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostModelDataSetRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewPostModelDataSetRunAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostModelDataSetRunBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostModelDataSetRunUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostModelDataSetRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostModelDataSetRunInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostModelDataSetRunOK creates a PostModelDataSetRunOK with default headers values
func NewPostModelDataSetRunOK() *PostModelDataSetRunOK {
	return &PostModelDataSetRunOK{}
}

/*
	PostModelDataSetRunOK describes a response with status code 200, with default header values.

OK
*/
type PostModelDataSetRunOK struct {
	Payload *models.PostModelDataSetRunResponse
}

func (o *PostModelDataSetRunOK) Error() string {
	return fmt.Sprintf("[POST /models/{modelId}/dataset/run][%d] postModelDataSetRunOK  %+v", 200, o.Payload)
}
func (o *PostModelDataSetRunOK) GetPayload() *models.PostModelDataSetRunResponse {
	return o.Payload
}

func (o *PostModelDataSetRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostModelDataSetRunResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostModelDataSetRunAccepted creates a PostModelDataSetRunAccepted with default headers values
func NewPostModelDataSetRunAccepted() *PostModelDataSetRunAccepted {
	return &PostModelDataSetRunAccepted{}
}

/*
	PostModelDataSetRunAccepted describes a response with status code 202, with default header values.

Operation was accepted
*/
type PostModelDataSetRunAccepted struct {
	RunAsync bool

	Payload *models.PostModelDataSetRunResponse
}

func (o *PostModelDataSetRunAccepted) Error() string {
	return fmt.Sprintf("[POST /models/{modelId}/dataset/run][%d] postModelDataSetRunAccepted  %+v", 202, o.Payload)
}
func (o *PostModelDataSetRunAccepted) GetPayload() *models.PostModelDataSetRunResponse {
	return o.Payload
}

func (o *PostModelDataSetRunAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Run-Async
	hdrRunAsync := response.GetHeader("Run-Async")

	if hdrRunAsync != "" {
		valrunAsync, err := swag.ConvertBool(hdrRunAsync)
		if err != nil {
			return errors.InvalidType("Run-Async", "header", "bool", hdrRunAsync)
		}
		o.RunAsync = valrunAsync
	}

	o.Payload = new(models.PostModelDataSetRunResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostModelDataSetRunBadRequest creates a PostModelDataSetRunBadRequest with default headers values
func NewPostModelDataSetRunBadRequest() *PostModelDataSetRunBadRequest {
	return &PostModelDataSetRunBadRequest{}
}

/*
	PostModelDataSetRunBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostModelDataSetRunBadRequest struct {
	Payload *models.Error
}

func (o *PostModelDataSetRunBadRequest) Error() string {
	return fmt.Sprintf("[POST /models/{modelId}/dataset/run][%d] postModelDataSetRunBadRequest  %+v", 400, o.Payload)
}
func (o *PostModelDataSetRunBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostModelDataSetRunBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostModelDataSetRunUnauthorized creates a PostModelDataSetRunUnauthorized with default headers values
func NewPostModelDataSetRunUnauthorized() *PostModelDataSetRunUnauthorized {
	return &PostModelDataSetRunUnauthorized{}
}

/*
	PostModelDataSetRunUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostModelDataSetRunUnauthorized struct {
	Payload *models.Error
}

func (o *PostModelDataSetRunUnauthorized) Error() string {
	return fmt.Sprintf("[POST /models/{modelId}/dataset/run][%d] postModelDataSetRunUnauthorized  %+v", 401, o.Payload)
}
func (o *PostModelDataSetRunUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostModelDataSetRunUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostModelDataSetRunNotFound creates a PostModelDataSetRunNotFound with default headers values
func NewPostModelDataSetRunNotFound() *PostModelDataSetRunNotFound {
	return &PostModelDataSetRunNotFound{}
}

/*
	PostModelDataSetRunNotFound describes a response with status code 404, with default header values.

Resource not found
*/
type PostModelDataSetRunNotFound struct {
	Payload *models.Error
}

func (o *PostModelDataSetRunNotFound) Error() string {
	return fmt.Sprintf("[POST /models/{modelId}/dataset/run][%d] postModelDataSetRunNotFound  %+v", 404, o.Payload)
}
func (o *PostModelDataSetRunNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostModelDataSetRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostModelDataSetRunInternalServerError creates a PostModelDataSetRunInternalServerError with default headers values
func NewPostModelDataSetRunInternalServerError() *PostModelDataSetRunInternalServerError {
	return &PostModelDataSetRunInternalServerError{}
}

/*
	PostModelDataSetRunInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PostModelDataSetRunInternalServerError struct {
	Payload *models.Error
}

func (o *PostModelDataSetRunInternalServerError) Error() string {
	return fmt.Sprintf("[POST /models/{modelId}/dataset/run][%d] postModelDataSetRunInternalServerError  %+v", 500, o.Payload)
}
func (o *PostModelDataSetRunInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostModelDataSetRunInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
