// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostPretrainRequest post pretrain request
//
// swagger:model postPretrainRequest
type PostPretrainRequest struct {

	// Data in one of two formats:
	// 1) A flat list of comma-separated values.
	// 2) The string that results from flattening the dataset, packing the values into a byte buffer as float32s (little-endian), and base-64 encoding the buffer.
	//
	// Datasets which are too large to send in one request may be sent in multiple chunks using the header parameters for chunked uploads (`txnId` and `chunkspec`).
	//
	// The total number of data values sent for pretraining must be a multiple of the number of features in the configuration.
	// Required: true
	Data *string `json:"data"`

	// Format specifier for `data`.
	// Enum: [csv b64float packed-float]
	Format *string `json:"format,omitempty"`
}

// Validate validates this post pretrain request
func (m *PostPretrainRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostPretrainRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

var postPretrainRequestTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["csv","b64float","packed-float"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postPretrainRequestTypeFormatPropEnum = append(postPretrainRequestTypeFormatPropEnum, v)
	}
}

const (

	// PostPretrainRequestFormatCsv captures enum value "csv"
	PostPretrainRequestFormatCsv string = "csv"

	// PostPretrainRequestFormatB64float captures enum value "b64float"
	PostPretrainRequestFormatB64float string = "b64float"

	// PostPretrainRequestFormatPackedDashFloat captures enum value "packed-float"
	PostPretrainRequestFormatPackedDashFloat string = "packed-float"
)

// prop value enum
func (m *PostPretrainRequest) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postPretrainRequestTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostPretrainRequest) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", *m.Format); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post pretrain request based on context it is used
func (m *PostPretrainRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostPretrainRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostPretrainRequest) UnmarshalBinary(b []byte) error {
	var res PostPretrainRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
