// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostLearningRequest post learning request
//
// swagger:model postLearningRequest
type PostLearningRequest struct {

	// autotuning
	Autotuning *AutotuneConfig `json:"autotuning,omitempty"`

	// Desired learning state.
	// Required: true
	// Enum: [Buffering Learning]
	State *string `json:"state"`

	// training
	// Required: true
	Training *TrainingConfig `json:"training"`
}

// Validate validates this post learning request
func (m *PostLearningRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutotuning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraining(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostLearningRequest) validateAutotuning(formats strfmt.Registry) error {
	if swag.IsZero(m.Autotuning) { // not required
		return nil
	}

	if m.Autotuning != nil {
		if err := m.Autotuning.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autotuning")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autotuning")
			}
			return err
		}
	}

	return nil
}

var postLearningRequestTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Buffering","Learning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postLearningRequestTypeStatePropEnum = append(postLearningRequestTypeStatePropEnum, v)
	}
}

const (

	// PostLearningRequestStateBuffering captures enum value "Buffering"
	PostLearningRequestStateBuffering string = "Buffering"

	// PostLearningRequestStateLearning captures enum value "Learning"
	PostLearningRequestStateLearning string = "Learning"
)

// prop value enum
func (m *PostLearningRequest) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postLearningRequestTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostLearningRequest) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *PostLearningRequest) validateTraining(formats strfmt.Registry) error {

	if err := validate.Required("training", "body", m.Training); err != nil {
		return err
	}

	if m.Training != nil {
		if err := m.Training.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("training")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("training")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post learning request based on the context it is used
func (m *PostLearningRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutotuning(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraining(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostLearningRequest) contextValidateAutotuning(ctx context.Context, formats strfmt.Registry) error {

	if m.Autotuning != nil {
		if err := m.Autotuning.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autotuning")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autotuning")
			}
			return err
		}
	}

	return nil
}

func (m *PostLearningRequest) contextValidateTraining(ctx context.Context, formats strfmt.Registry) error {

	if m.Training != nil {
		if err := m.Training.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("training")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("training")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostLearningRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostLearningRequest) UnmarshalBinary(b []byte) error {
	var res PostLearningRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
