// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyticResults analytic results
//
// swagger:model analyticResults
type AnalyticResults struct {

	// A binary array where 1 means a pattern was anomalous and 0 means normal. This value is derived by thresholding the `anomalyIndex`.
	AD []uint16 `json:"AD"`

	// The number of anomalous patterns in the last `historyWindow` samples. Specifically, this is a moving-window sum of the `anomalyDetection` array with window length `historyWindow`.
	AH []uint16 `json:"AH"`

	// Amber warning level at each sample, a measure of the compliance of recent behavior compared to behavior observed during `Learning`. This value is derived from `recentAnomalies` and a statistical model of expectations about the usual frequency of anomalies.
	// - `0`: OK
	// - `1`: asset changing
	// - `2`: asset critical
	AW []uint16 `json:"AW"`

	// See Boon Docs.
	CS []uint16 `json:"CS"`

	// The cluster to which each input pattern was assigned. The first pattern is assigned a `clusterId` of 1. Each pattern thereafter is either assigned to an existing cluster (if its distance from that cluster is less than `percentVariation`) or creates a new cluster (if its distance from all clusters exceeds `percentVariation`). The `clusterId` for each new cluster is the current maximum `clusterId` plus one. For example, a model with 10 clusters will have `clusterIds` 1-10, and the next new cluster will have `clusterId` 11.
	//
	// During `Monitoring`, the cluster model becomes frozen and no new clusters are formed. Patterns which cannot be assigned to any existing cluster will return a negative `clusterId`. These `clusterIds` start at -1 and decreasing strictly by 1 without repeating (they can be used for root cause analysis).
	ID []int32 `json:"ID"`

	// See Boon Docs.
	NI []uint16 `json:"NI"`

	// See Boon Docs.
	NS []uint16 `json:"NS"`

	// See Boon Docs.
	NW []float32 `json:"NW"`

	// See Boon Docs.
	OM []float32 `json:"OM"`

	// An anomaly index that represents the probability within the model of getting that cluster. PI is scaled so that 0 is the most probable cluster (least anomalous) and values close to 1000 represent very improbable clusters, that is, that very rarely occurred during training.
	PI []uint16 `json:"PI"`

	// An integer between 0 and 1000 giving a measure of how anomalous this pattern is compared to patterns seen in the past. Values closer to 0 represent patterns which are ordinary given the data seen so far on this model, while values closer to 1000 represent anomalous patterns. Patterns with a high `anomalyIndex` belong to clusters with relatively few patterns compared to the other clusters.
	RI []uint16 `json:"RI"`

	// Exponentially smoothed `anomalyIndex` over the last 15 samples. The range remains between 0 and 1000.
	SI []uint16 `json:"SI"`
}

// Validate validates this analytic results
func (m *AnalyticResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAW(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var analyticResultsAWItemsEnum []interface{}

func init() {
	var res []uint16
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticResultsAWItemsEnum = append(analyticResultsAWItemsEnum, v)
	}
}

func (m *AnalyticResults) validateAWItemsEnum(path, location string, value uint16) error {
	if err := validate.EnumCase(path, location, value, analyticResultsAWItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AnalyticResults) validateAW(formats strfmt.Registry) error {
	if swag.IsZero(m.AW) { // not required
		return nil
	}

	for i := 0; i < len(m.AW); i++ {

		// value enum
		if err := m.validateAWItemsEnum("AW"+"."+strconv.Itoa(i), "body", m.AW[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this analytic results based on context it is used
func (m *AnalyticResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AnalyticResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyticResults) UnmarshalBinary(b []byte) error {
	var res AnalyticResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
