// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeatureConfig feature config
//
// swagger:model featureConfig
type FeatureConfig struct {

	// Inference policy for the fusion vector when using `PUT /data`. If `submit`, any `PUT /data` request that updates this feature will cause the fusion vector to be submitted for inference. If `nosubmit`, updates to this feature will not trigger a fusion vector inference.
	// Enum: [submit nosubmit]
	FusionRule *string `json:"fusionRule,omitempty"`

	// Number of seconds without an update before this feature's value is considered invalid.
	FusionTTL *uint64 `json:"fusionTTL,omitempty"`

	// Maximum expected value for this feature. `maxVal` can be left unset if it is not known at configuration time. In that case, data collected during the `Buffering` stage will be used to infer an optimal value during the `Autotuning` stage and it will be set to the autotuned value at the start of `Learning`.
	MaxVal float32 `json:"maxVal,omitempty"`

	// Minimum expected value for this feature. `minVal` can be left unset if it is not known at configuration time. In that case, data collected during the `Buffering` stage will be used to infer an optimal `minVal` during the `Autotuning` stage and it will be set to the autotuned value at the start of `Learning`.
	MinVal float32 `json:"minVal,omitempty"`

	// Name for this feature. Must be unique with respect to other features in the configuration. Regex: `^[A-Za-z0-9.:_-]{1,1024}$`.
	Name string `json:"name,omitempty"`

	// Weight of this feature relative to others, as an integer between 1 and 1000.
	// Maximum: 1000
	// Minimum: 1
	Weight uint16 `json:"weight,omitempty"`
}

// Validate validates this feature config
func (m *FeatureConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFusionRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var featureConfigTypeFusionRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["submit","nosubmit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		featureConfigTypeFusionRulePropEnum = append(featureConfigTypeFusionRulePropEnum, v)
	}
}

const (

	// FeatureConfigFusionRuleSubmit captures enum value "submit"
	FeatureConfigFusionRuleSubmit string = "submit"

	// FeatureConfigFusionRuleNosubmit captures enum value "nosubmit"
	FeatureConfigFusionRuleNosubmit string = "nosubmit"
)

// prop value enum
func (m *FeatureConfig) validateFusionRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, featureConfigTypeFusionRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FeatureConfig) validateFusionRule(formats strfmt.Registry) error {
	if swag.IsZero(m.FusionRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateFusionRuleEnum("fusionRule", "body", *m.FusionRule); err != nil {
		return err
	}

	return nil
}

func (m *FeatureConfig) validateWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Weight) { // not required
		return nil
	}

	if err := validate.MinimumUint("weight", "body", uint64(m.Weight), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("weight", "body", uint64(m.Weight), 1000, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this feature config based on context it is used
func (m *FeatureConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FeatureConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureConfig) UnmarshalBinary(b []byte) error {
	var res FeatureConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
