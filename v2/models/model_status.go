// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelStatus model status
//
// swagger:model modelStatus
type ModelStatus struct {

	// Total number of clusters generated by patterns so far.
	ClusterCount uint64 `json:"clusterCount"`

	// Current Amber compliance score: a ranged measure of the compliance of recent behavior compared to behavior observed in `Learning`.
	// - `0`: asset critical
	// - `100`: OK
	// Maximum: 100
	// Minimum: 0
	ComplianceScore *uint16 `json:"complianceScore"`

	// Reason for learning being turned off.
	Graduation string `json:"graduation"`

	// Unix time stamp of the last posted stream data
	LastModified uint64 `json:"lastModified,omitempty"`

	// number of seconds since the last posted stream data
	LastModifiedDelta uint64 `json:"lastModifiedDelta,omitempty"`

	// Status description.
	Message string `json:"message"`

	// During `Buffering`, `Learning` and `Autotuning`: estimated progress through the current state as an integer percentage.
	//
	// During `Monitoring`: this field does not apply.
	// Maximum: 100
	// Minimum: 0
	Progress *uint16 `json:"progress"`

	// Total number of patterns processed since configuration.
	SampleCount uint64 `json:"sampleCount"`

	// state
	State AmberState `json:"state,omitempty"`

	// Current Amber warning level, a measure of the compliance of recent behavior compared to behavior observed `Learning`.
	// - `0`: OK
	// - `1`: asset changing
	// - `2`: asset critical
	// Enum: [0 1 2]
	WarningLevel uint16 `json:"warningLevel"`
}

// Validate validates this model status
func (m *ModelStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComplianceScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarningLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelStatus) validateComplianceScore(formats strfmt.Registry) error {
	if swag.IsZero(m.ComplianceScore) { // not required
		return nil
	}

	if err := validate.MinimumUint("complianceScore", "body", uint64(*m.ComplianceScore), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("complianceScore", "body", uint64(*m.ComplianceScore), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *ModelStatus) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if err := validate.MinimumUint("progress", "body", uint64(*m.Progress), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("progress", "body", uint64(*m.Progress), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *ModelStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

var modelStatusTypeWarningLevelPropEnum []interface{}

func init() {
	var res []uint16
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelStatusTypeWarningLevelPropEnum = append(modelStatusTypeWarningLevelPropEnum, v)
	}
}

// prop value enum
func (m *ModelStatus) validateWarningLevelEnum(path, location string, value uint16) error {
	if err := validate.EnumCase(path, location, value, modelStatusTypeWarningLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModelStatus) validateWarningLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.WarningLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateWarningLevelEnum("warningLevel", "body", m.WarningLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model status based on the context it is used
func (m *ModelStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelStatus) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := m.State.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelStatus) UnmarshalBinary(b []byte) error {
	var res ModelStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
