// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutDataRequest put data request
//
// swagger:model putDataRequest
type PutDataRequest struct {

	// If `submit`, the fusion vector will be submitted for inference on this request. If `nosubmit`, this request will not trigger an inference. If `default`, follow the rules for the submitted features.
	// Enum: [default submit nosubmit]
	FusionRule *string `json:"fusionRule,omitempty"`

	// Updates to apply to the current fusion vector.
	// Required: true
	Vector []*FusionFeature `json:"vector"`
}

// Validate validates this put data request
func (m *PutDataRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFusionRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var putDataRequestTypeFusionRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","submit","nosubmit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putDataRequestTypeFusionRulePropEnum = append(putDataRequestTypeFusionRulePropEnum, v)
	}
}

const (

	// PutDataRequestFusionRuleDefault captures enum value "default"
	PutDataRequestFusionRuleDefault string = "default"

	// PutDataRequestFusionRuleSubmit captures enum value "submit"
	PutDataRequestFusionRuleSubmit string = "submit"

	// PutDataRequestFusionRuleNosubmit captures enum value "nosubmit"
	PutDataRequestFusionRuleNosubmit string = "nosubmit"
)

// prop value enum
func (m *PutDataRequest) validateFusionRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putDataRequestTypeFusionRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PutDataRequest) validateFusionRule(formats strfmt.Registry) error {
	if swag.IsZero(m.FusionRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateFusionRuleEnum("fusionRule", "body", *m.FusionRule); err != nil {
		return err
	}

	return nil
}

func (m *PutDataRequest) validateVector(formats strfmt.Registry) error {

	if err := validate.Required("vector", "body", m.Vector); err != nil {
		return err
	}

	for i := 0; i < len(m.Vector); i++ {
		if swag.IsZero(m.Vector[i]) { // not required
			continue
		}

		if m.Vector[i] != nil {
			if err := m.Vector[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vector" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put data request based on the context it is used
func (m *PutDataRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutDataRequest) contextValidateVector(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vector); i++ {

		if m.Vector[i] != nil {
			if err := m.Vector[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vector" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PutDataRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutDataRequest) UnmarshalBinary(b []byte) error {
	var res PutDataRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
