// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataSetRunResponse data set run response
//
// swagger:model dataSetRunResponse
type DataSetRunResponse struct {

	// features
	Features []*PresignedURL `json:"features"`

	// Error description
	Message string `json:"message,omitempty"`

	// progress
	Progress uint16 `json:"progress,omitempty"`

	// results
	Results []*PresignedURL `json:"results"`

	// status
	// Enum: [None Error Training Trained Testing Tested]
	Status *string `json:"status,omitempty"`

	// url used for downloading test data plus analytics
	TestingResultsURL string `json:"testingResultsUrl,omitempty"`
}

// Validate validates this data set run response
func (m *DataSetRunResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataSetRunResponse) validateFeatures(formats strfmt.Registry) error {
	if swag.IsZero(m.Features) { // not required
		return nil
	}

	for i := 0; i < len(m.Features); i++ {
		if swag.IsZero(m.Features[i]) { // not required
			continue
		}

		if m.Features[i] != nil {
			if err := m.Features[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataSetRunResponse) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var dataSetRunResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Error","Training","Trained","Testing","Tested"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataSetRunResponseTypeStatusPropEnum = append(dataSetRunResponseTypeStatusPropEnum, v)
	}
}

const (

	// DataSetRunResponseStatusNone captures enum value "None"
	DataSetRunResponseStatusNone string = "None"

	// DataSetRunResponseStatusError captures enum value "Error"
	DataSetRunResponseStatusError string = "Error"

	// DataSetRunResponseStatusTraining captures enum value "Training"
	DataSetRunResponseStatusTraining string = "Training"

	// DataSetRunResponseStatusTrained captures enum value "Trained"
	DataSetRunResponseStatusTrained string = "Trained"

	// DataSetRunResponseStatusTesting captures enum value "Testing"
	DataSetRunResponseStatusTesting string = "Testing"

	// DataSetRunResponseStatusTested captures enum value "Tested"
	DataSetRunResponseStatusTested string = "Tested"
)

// prop value enum
func (m *DataSetRunResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataSetRunResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataSetRunResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data set run response based on the context it is used
func (m *DataSetRunResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataSetRunResponse) contextValidateFeatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Features); i++ {

		if m.Features[i] != nil {
			if err := m.Features[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataSetRunResponse) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {
			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSetRunResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSetRunResponse) UnmarshalBinary(b []byte) error {
	var res DataSetRunResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
