// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TrainingConfig training config
//
// swagger:model trainingConfig
type TrainingConfig struct {

	// Number of data vectors to collect during `Buffering`. These samples are used as data for `Autotuning`.
	BufferingSamples *uint32 `json:"bufferingSamples,omitempty"`

	// Number of past inferences to take into account when computing `warningLevel` at a given moment.
	HistoryWindow *uint32 `json:"historyWindow,omitempty"`

	// Maximum number of clusters before model transitions from `Learning` to `Monitoring`.
	LearningMaxClusters *uint16 `json:"learningMaxClusters,omitempty"`

	// Maximum number of vectors to process during `Learning` before transitioning to `Monitoring`.
	LearningMaxSamples *uint64 `json:"learningMaxSamples,omitempty"`

	// See `learningRateNumerator`.
	LearningRateDenominator *uint64 `json:"learningRateDenominator,omitempty"`

	// Switch to `Monitoring` if there were fewer than `learningRateNumerator` new clusters in the last `learningRateDenominator` inferences.
	LearningRateNumerator *uint64 `json:"learningRateNumerator,omitempty"`
}

// Validate validates this training config
func (m *TrainingConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this training config based on context it is used
func (m *TrainingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrainingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrainingConfig) UnmarshalBinary(b []byte) error {
	var res TrainingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
