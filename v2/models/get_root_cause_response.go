// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetRootCauseResponse get root cause response
//
// swagger:model getRootCauseResponse
type GetRootCauseResponse struct {

	// root cause list
	RootCauseList [][]*FeatureRootCause `json:"rootCauseList"`
}

// Validate validates this get root cause response
func (m *GetRootCauseResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootCauseList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRootCauseResponse) validateRootCauseList(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCauseList) { // not required
		return nil
	}

	for i := 0; i < len(m.RootCauseList); i++ {

		for ii := 0; ii < len(m.RootCauseList[i]); ii++ {
			if swag.IsZero(m.RootCauseList[i][ii]) { // not required
				continue
			}

			if m.RootCauseList[i][ii] != nil {
				if err := m.RootCauseList[i][ii].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("rootCauseList" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("rootCauseList" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	return nil
}

// ContextValidate validate this get root cause response based on the context it is used
func (m *GetRootCauseResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRootCauseList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRootCauseResponse) contextValidateRootCauseList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RootCauseList); i++ {

		for ii := 0; ii < len(m.RootCauseList[i]); ii++ {

			if m.RootCauseList[i][ii] != nil {
				if err := m.RootCauseList[i][ii].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("rootCauseList" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("rootCauseList" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetRootCauseResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetRootCauseResponse) UnmarshalBinary(b []byte) error {
	var res GetRootCauseResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
