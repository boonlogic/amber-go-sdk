// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeatureConfig feature config
//
// swagger:model featureConfig
type FeatureConfig struct {

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// label associated with feature
	Label string `json:"label,omitempty"`

	// corresponding maximum value
	// Required: true
	MaxVal *float32 `json:"maxVal"`

	// the value that should be considered the minimum value for this feature. This can be set to a value larger than the actual min if you want to treat all value less than that as the same (for instance, to keep a noise spike from having undue influence in the clustering
	// Required: true
	MinVal *float32 `json:"minVal"`

	// corresponding weight
	Weight uint16 `json:"weight,omitempty"`
}

// Validate validates this feature config
func (m *FeatureConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxVal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinVal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureConfig) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *FeatureConfig) validateMaxVal(formats strfmt.Registry) error {

	if err := validate.Required("maxVal", "body", m.MaxVal); err != nil {
		return err
	}

	return nil
}

func (m *FeatureConfig) validateMinVal(formats strfmt.Registry) error {

	if err := validate.Required("minVal", "body", m.MinVal); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this feature config based on the context it is used
func (m *FeatureConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureConfig) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeatureConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureConfig) UnmarshalBinary(b []byte) error {
	var res FeatureConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
