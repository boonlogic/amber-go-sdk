// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MNanoConfig m nano config
//
// swagger:model m_NanoConfig
type MNanoConfig struct {

	// features
	// Required: true
	Features []*FeatureConfig `json:"Features"`

	// num of features
	// Required: true
	NumOfFeatures *uint16 `json:"NumOfFeatures"`

	// version number
	VersionNumber VersionNumber `json:"VersionNumber,omitempty"`

	// m accuracy
	MAccuracy float32 `json:"m_Accuracy,omitempty"`

	// m numeric format
	MNumericFormat uint16 `json:"m_NumericFormat,omitempty"`

	// the percent variation (for instance, 0.025 gives 2.5% variation) used for clustering
	// Required: true
	MPercentVariation *float32 `json:"m_PercentVariation"`
}

// Validate validates this m nano config
func (m *MNanoConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumOfFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMPercentVariation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MNanoConfig) validateFeatures(formats strfmt.Registry) error {

	if err := validate.Required("Features", "body", m.Features); err != nil {
		return err
	}

	for i := 0; i < len(m.Features); i++ {
		if swag.IsZero(m.Features[i]) { // not required
			continue
		}

		if m.Features[i] != nil {
			if err := m.Features[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MNanoConfig) validateNumOfFeatures(formats strfmt.Registry) error {

	if err := validate.Required("NumOfFeatures", "body", m.NumOfFeatures); err != nil {
		return err
	}

	return nil
}

func (m *MNanoConfig) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionNumber) { // not required
		return nil
	}

	if err := m.VersionNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

func (m *MNanoConfig) validateMPercentVariation(formats strfmt.Registry) error {

	if err := validate.Required("m_PercentVariation", "body", m.MPercentVariation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this m nano config based on the context it is used
func (m *MNanoConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MNanoConfig) contextValidateFeatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Features); i++ {

		if m.Features[i] != nil {
			if err := m.Features[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Features" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MNanoConfig) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VersionNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VersionNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("VersionNumber")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MNanoConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MNanoConfig) UnmarshalBinary(b []byte) error {
	var res MNanoConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
