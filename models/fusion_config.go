// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FusionConfig fusion config
//
// swagger:model fusionConfig
type FusionConfig struct {

	// label associated with feature
	// Required: true
	Label *string `json:"label"`

	// policy for submitting sensor fusion vector when this feature is updated. One of "submit", "nosubmit" (defaults to "submit")
	// Enum: [submit nosubmit]
	SubmitRule string `json:"submitRule,omitempty"`
}

// Validate validates this fusion config
func (m *FusionConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmitRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FusionConfig) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

var fusionConfigTypeSubmitRulePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["submit","nosubmit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fusionConfigTypeSubmitRulePropEnum = append(fusionConfigTypeSubmitRulePropEnum, v)
	}
}

const (

	// FusionConfigSubmitRuleSubmit captures enum value "submit"
	FusionConfigSubmitRuleSubmit string = "submit"

	// FusionConfigSubmitRuleNosubmit captures enum value "nosubmit"
	FusionConfigSubmitRuleNosubmit string = "nosubmit"
)

// prop value enum
func (m *FusionConfig) validateSubmitRuleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fusionConfigTypeSubmitRulePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FusionConfig) validateSubmitRule(formats strfmt.Registry) error {
	if swag.IsZero(m.SubmitRule) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubmitRuleEnum("submitRule", "body", m.SubmitRule); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fusion config based on context it is used
func (m *FusionConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FusionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FusionConfig) UnmarshalBinary(b []byte) error {
	var res FusionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
