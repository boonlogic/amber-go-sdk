// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StreamStatus stream status
//
// swagger:model streamStatus
type StreamStatus struct {

	// current cluster count (applies to Learning and Monitoring states)
	// Required: true
	ClusterCount *uint32 `json:"clusterCount"`

	// Unix time stamp of the last posted stream data
	LastModified uint64 `json:"lastModified,omitempty"`

	// number of seconds since the last posted stream data
	LastModifiedDelta uint64 `json:"lastModifiedDelta,omitempty"`

	// message to accompany the current state
	// Required: true
	Message *string `json:"message"`

	// completion percentage (applies to Buffering and Autotuning states)
	// Required: true
	Progress *uint16 `json:"progress"`

	// number of restarts that have happened during autotuning
	// Required: true
	RetryCount *uint16 `json:"retryCount"`

	// state of the sensor, states will be prefixed with a state variable  followed by a colon followed by a message indicating progress.  Possible state variables  are: Not streaming, Buffering, Autotuning, Learning, Learning Complete, Monitoring,  Streaming error,  Autotuning error, Autotuning retry
	// Required: true
	State *string `json:"state"`

	// the current streaming window size that is being used
	// Required: true
	StreamingWindowSize *uint16 `json:"streamingWindowSize"`

	// inferences since the most recent restart
	// Required: true
	TotalInferences *uint64 `json:"totalInferences"`
}

// Validate validates this stream status
func (m *StreamStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamingWindowSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalInferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamStatus) validateClusterCount(formats strfmt.Registry) error {

	if err := validate.Required("clusterCount", "body", m.ClusterCount); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress", "body", m.Progress); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateRetryCount(formats strfmt.Registry) error {

	if err := validate.Required("retryCount", "body", m.RetryCount); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateStreamingWindowSize(formats strfmt.Registry) error {

	if err := validate.Required("streamingWindowSize", "body", m.StreamingWindowSize); err != nil {
		return err
	}

	return nil
}

func (m *StreamStatus) validateTotalInferences(formats strfmt.Registry) error {

	if err := validate.Required("totalInferences", "body", m.TotalInferences); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stream status based on context it is used
func (m *StreamStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StreamStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamStatus) UnmarshalBinary(b []byte) error {
	var res StreamStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
